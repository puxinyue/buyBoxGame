{
  "0x5634a2e51936234aec92eaef256f0d42c18592c3068a900f6043f56df673e027": {
    "name": "BoxLottery",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "BoxLottery",
      "sourceName": "contracts/BoxLottery.sol",
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "OwnableInvalidOwner",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "OwnableUnauthorizedAccount",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "ReentrancyGuardReentrantCall",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "boxId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "enum BoxLottery.PrizeType",
              "name": "prizeType",
              "type": "uint8"
            }
          ],
          "name": "BoxOpened",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "nftTokenContract",
              "type": "address"
            }
          ],
          "name": "NFTTokenContractSet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "boxId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "enum BoxLottery.PrizeType",
              "name": "prizeType",
              "type": "uint8"
            }
          ],
          "name": "PrizeClaimed",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "LARGE_PRIZE",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MEDIUM_PRIZE",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "PRICE_PER_BOX",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "SMALL_PRIZE",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "TOTAL_BOXES",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "boxes",
          "outputs": [
            {
              "internalType": "bool",
              "name": "opened",
              "type": "bool"
            },
            {
              "internalType": "enum BoxLottery.PrizeType",
              "name": "prizeType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "boxId",
              "type": "uint256"
            }
          ],
          "name": "claimPrize",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "boxId",
              "type": "uint256"
            }
          ],
          "name": "getBoxStatus",
          "outputs": [
            {
              "internalType": "bool",
              "name": "opened",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "nftToken",
          "outputs": [
            {
              "internalType": "contract NFTToken",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "boxId",
              "type": "uint256"
            }
          ],
          "name": "openBox",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_nftToken",
              "type": "address"
            }
          ],
          "name": "setNFTTokenContract",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "withdraw",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "bytecode": "0x60806040523480156200001157600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000885760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200007f91906200087e565b60405180910390fd5b6200009981620000b760201b60201c565b5060018081905550620000b16200017b60201b60201c565b62000b0e565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000606467ffffffffffffffff8111156200019b576200019a6200089b565b5b604051908082528060200260200182016040528015620001ca5781602001602082028036833780820191505090505b50905060005b6064811015620002135780828281518110620001f157620001f0620008ca565b5b60200260200101818152505080806200020a9062000932565b915050620001d0565b506000600160646200022691906200097f565b90505b600081111562000317576000600182620002449190620009ba565b42836040516020016200025992919062000a1a565b6040516020818303038152906040528051906020012060001c6200027e919062000a79565b9050828181518110620002965762000295620008ca565b5b6020026020010151838381518110620002b457620002b3620008ca565b5b6020026020010151848481518110620002d257620002d1620008ca565b5b60200260200101858481518110620002ef57620002ee620008ca565b5b60200260200101828152508281525050505080806200030e9062000ab1565b91505062000229565b50600060405180606001604052806000151581526020016003600481111562000345576200034462000adf565b5b81526020016000151581525060026000848480620003639062000932565b955081518110620003795762000378620008ca565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836004811115620003dd57620003dc62000adf565b5b021790555060408201518160000160026101000a81548160ff02191690831515021790555090505060005b600381101562000513576040518060600160405280600015158152602001600260048111156200043d576200043c62000adf565b5b815260200160001515815250600260008585806200045b9062000932565b965081518110620004715762000470620008ca565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836004811115620004d557620004d462000adf565b5b021790555060408201518160000160026101000a81548160ff02191690831515021790555090505080806200050a9062000932565b91505062000408565b5060005b600f81101562000622576040518060600160405280600015158152602001600160048111156200054c576200054b62000adf565b5b815260200160001515815250600260008585806200056a9062000932565b96508151811062000580576200057f620008ca565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836004811115620005e457620005e362000adf565b5b021790555060408201518160000160026101000a81548160ff0219169083151502179055509050508080620006199062000932565b91505062000517565b5060005b6006811015620007305760405180606001604052806000151581526020016004808111156200065a576200065962000adf565b5b81526020016000151581525060026000858580620006789062000932565b9650815181106200068e576200068d620008ca565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836004811115620006f257620006f162000adf565b5b021790555060408201518160000160026101000a81548160ff0219169083151502179055509050508080620007279062000932565b91505062000626565b5060008190505b606481101562000834576040518060600160405280600015158152602001600060048111156200076c576200076b62000adf565b5b81526020016000151581525060026000858481518110620007925762000791620008ca565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836004811115620007f657620007f562000adf565b5b021790555060408201518160000160026101000a81548160ff02191690831515021790555090505080806200082b9062000932565b91505062000737565b505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008668262000839565b9050919050565b620008788162000859565b82525050565b60006020820190506200089560008301846200086d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006200093f8262000928565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620009745762000973620008f9565b5b600182019050919050565b60006200098c8262000928565b9150620009998362000928565b9250828203905081811115620009b457620009b3620008f9565b5b92915050565b6000620009c78262000928565b9150620009d48362000928565b9250828201905080821115620009ef57620009ee620008f9565b5b92915050565b6000819050919050565b62000a1462000a0e8262000928565b620009f5565b82525050565b600062000a288285620009ff565b60208201915062000a3a8284620009ff565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000a868262000928565b915062000a938362000928565b92508262000aa65762000aa562000a4a565b5b828206905092915050565b600062000abe8262000928565b91506000820362000ad45762000ad3620008f9565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6117798062000b1e6000396000f3fe6080604052600436106100ec5760003560e01c8063a921bc5b1161008a578063d4b3c61711610059578063d4b3c617146102bf578063d7098154146102ea578063eb9780cc14610313578063f2fde38b1461033e576100f3565b8063a921bc5b14610224578063b1e5e2b71461024d578063b8b3b48d14610269578063d06fcba814610294576100f3565b80634dfa3444116100c65780634dfa3444146101655780634ed3faf2146101a3578063715018a6146101e25780638da5cb5b146101f9576100f3565b8063373692dc146100f85780633ccfd60b146101235780634af2b4401461013a576100f3565b366100f357005b600080fd5b34801561010457600080fd5b5061010d610367565b60405161011a9190611074565b60405180910390f35b34801561012f57600080fd5b5061013861036c565b005b34801561014657600080fd5b5061014f6103c4565b60405161015c9190611074565b60405180910390f35b34801561017157600080fd5b5061018c600480360381019061018791906110c0565b6103cf565b60405161019a929190611108565b60405180910390f35b3480156101af57600080fd5b506101ca60048036038101906101c591906110c0565b610466565b6040516101d9939291906111a8565b60405180910390f35b3480156101ee57600080fd5b506101f76104b7565b005b34801561020557600080fd5b5061020e6104cb565b60405161021b9190611220565b60405180910390f35b34801561023057600080fd5b5061024b60048036038101906102469190611267565b6104f4565b005b610267600480360381019061026291906110c0565b6105f2565b005b34801561027557600080fd5b5061027e610797565b60405161028b9190611074565b60405180910390f35b3480156102a057600080fd5b506102a96107a2565b6040516102b691906112f3565b60405180910390f35b3480156102cb57600080fd5b506102d46107c8565b6040516102e19190611074565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c91906110c0565b6107d4565b005b34801561031f57600080fd5b50610328610e27565b6040516103359190611074565b60405180910390f35b34801561034a57600080fd5b5061036560048036038101906103609190611267565b610e33565b005b606481565b610374610eb9565b61037c6104cb565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156103c1573d6000803e3d6000fd5b50565b66354a6ba7a1800081565b60008060648310610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040c9061136b565b60405180910390fd5b6002600084815260200190815260200160002060000160009054906101000a900460ff166002600085815260200190815260200160002060000160029054906101000a900460ff1691509150915091565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a900460ff16905083565b6104bf610eb9565b6104c96000610f40565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104fc610eb9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361056b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610562906113d7565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fc026bf37ffb9004f36e978cd2fbc05a6e6ba7cc21fb9f7ce3a3bdc8a01e225e460405160405180910390a250565b6105fa611004565b6064811061063d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106349061136b565b60405180910390fd5b6002600082815260200190815260200160002060000160009054906101000a900460ff16156106a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069890611443565b60405180910390fd5b66354a6ba7a1800034146106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e1906114af565b60405180910390fd5b60016002600083815260200190815260200160002060000160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f465d1db9798268665147c6840d57ac3aaedc3df105a473c524c00a37ffd9add4826002600085815260200190815260200160002060000160019054906101000a900460ff166040516107849291906114cf565b60405180910390a261079461104a565b50565b66071afd498d000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b67016345785d8a000081565b6107dc611004565b6064811061081f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108169061136b565b60405180910390fd5b6002600082815260200190815260200160002060000160009054906101000a900460ff16610882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087990611544565b60405180910390fd5b6002600082815260200190815260200160002060000160029054906101000a900460ff16156108e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dd906115b0565b60405180910390fd5b6004808111156108f9576108f8611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff16600481111561092f5761092e611131565b5b03610aa157600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036109c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bc9061161c565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aa271e1a306040518263ffffffff1660e01b8152600401610a209190611220565b602060405180830381865afa158015610a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a619190611668565b610aa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a97906116e1565b60405180910390fd5b5b60016002600083815260200190815260200160002060000160026101000a81548160ff02191690831515021790555060016004811115610ae457610ae3611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610b1a57610b19611131565b5b03610b72573373ffffffffffffffffffffffffffffffffffffffff166108fc66071afd498d00009081150290604051600060405180830381858888f19350505050158015610b6c573d6000803e3d6000fd5b50610da9565b60026004811115610b8657610b85611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610bbc57610bbb611131565b5b03610c15573373ffffffffffffffffffffffffffffffffffffffff166108fc67016345785d8a00009081150290604051600060405180830381858888f19350505050158015610c0f573d6000803e3d6000fd5b50610da8565b60036004811115610c2957610c28611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610c5f57610c5e611131565b5b03610cb8573373ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051600060405180830381858888f19350505050158015610cb2573d6000803e3d6000fd5b50610da7565b600480811115610ccb57610cca611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610d0157610d00611131565b5b03610da657600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340d097c3336040518263ffffffff1660e01b8152600401610d619190611220565b6020604051808303816000875af1158015610d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da49190611716565b505b5b5b5b3373ffffffffffffffffffffffffffffffffffffffff167f53e3c45643a014901c16ab423f86c7d01176630d62d4adef2c2396f539fc6567826002600085815260200190815260200160002060000160019054906101000a900460ff16604051610e149291906114cf565b60405180910390a2610e2461104a565b50565b670de0b6b3a764000081565b610e3b610eb9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ead5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610ea49190611220565b60405180910390fd5b610eb681610f40565b50565b610ec1611053565b73ffffffffffffffffffffffffffffffffffffffff16610edf6104cb565b73ffffffffffffffffffffffffffffffffffffffff1614610f3e57610f02611053565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610f359190611220565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600260015403611040576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b600033905090565b6000819050919050565b61106e8161105b565b82525050565b60006020820190506110896000830184611065565b92915050565b600080fd5b61109d8161105b565b81146110a857600080fd5b50565b6000813590506110ba81611094565b92915050565b6000602082840312156110d6576110d561108f565b5b60006110e4848285016110ab565b91505092915050565b60008115159050919050565b611102816110ed565b82525050565b600060408201905061111d60008301856110f9565b61112a60208301846110f9565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061117157611170611131565b5b50565b600081905061118282611160565b919050565b600061119282611174565b9050919050565b6111a281611187565b82525050565b60006060820190506111bd60008301866110f9565b6111ca6020830185611199565b6111d760408301846110f9565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061120a826111df565b9050919050565b61121a816111ff565b82525050565b60006020820190506112356000830184611211565b92915050565b611244816111ff565b811461124f57600080fd5b50565b6000813590506112618161123b565b92915050565b60006020828403121561127d5761127c61108f565b5b600061128b84828501611252565b91505092915050565b6000819050919050565b60006112b96112b46112af846111df565b611294565b6111df565b9050919050565b60006112cb8261129e565b9050919050565b60006112dd826112c0565b9050919050565b6112ed816112d2565b82525050565b600060208201905061130860008301846112e4565b92915050565b600082825260208201905092915050565b7f496e76616c696420626f78204944000000000000000000000000000000000000600082015250565b6000611355600e8361130e565b91506113608261131f565b602082019050919050565b6000602082019050818103600083015261138481611348565b9050919050565b7f496e76616c6964204e465420746f6b656e206164647265737300000000000000600082015250565b60006113c160198361130e565b91506113cc8261138b565b602082019050919050565b600060208201905081810360008301526113f0816113b4565b9050919050565b7f426f7820616c7265616479206f70656e65640000000000000000000000000000600082015250565b600061142d60128361130e565b9150611438826113f7565b602082019050919050565b6000602082019050818103600083015261145c81611420565b9050919050565b7f496e636f7272656374207061796d656e7420616d6f756e740000000000000000600082015250565b600061149960188361130e565b91506114a482611463565b602082019050919050565b600060208201905081810360008301526114c88161148c565b9050919050565b60006040820190506114e46000830185611065565b6114f16020830184611199565b9392505050565b7f426f78206e6f74206f70656e6564207965740000000000000000000000000000600082015250565b600061152e60128361130e565b9150611539826114f8565b602082019050919050565b6000602082019050818103600083015261155d81611521565b9050919050565b7f5072697a6520616c726561647920636c61696d65640000000000000000000000600082015250565b600061159a60158361130e565b91506115a582611564565b602082019050919050565b600060208201905081810360008301526115c98161158d565b9050919050565b7f4e465420746f6b656e20636f6e7472616374206e6f7420736574000000000000600082015250565b6000611606601a8361130e565b9150611611826115d0565b602082019050919050565b60006020820190508181036000830152611635816115f9565b9050919050565b611645816110ed565b811461165057600080fd5b50565b6000815190506116628161163c565b92915050565b60006020828403121561167e5761167d61108f565b5b600061168c84828501611653565b91505092915050565b7f436f6e7472616374206e6f7420617574686f72697a656420746f206d696e7400600082015250565b60006116cb601f8361130e565b91506116d682611695565b602082019050919050565b600060208201905081810360008301526116fa816116be565b9050919050565b60008151905061171081611094565b92915050565b60006020828403121561172c5761172b61108f565b5b600061173a84828501611701565b9150509291505056fea264697066735822122028a180e5fbb420a21b88370da0124052763c2f5af9286ed4bf3432158126871c64736f6c63430008140033",
      "deployedBytecode": "0x6080604052600436106100ec5760003560e01c8063a921bc5b1161008a578063d4b3c61711610059578063d4b3c617146102bf578063d7098154146102ea578063eb9780cc14610313578063f2fde38b1461033e576100f3565b8063a921bc5b14610224578063b1e5e2b71461024d578063b8b3b48d14610269578063d06fcba814610294576100f3565b80634dfa3444116100c65780634dfa3444146101655780634ed3faf2146101a3578063715018a6146101e25780638da5cb5b146101f9576100f3565b8063373692dc146100f85780633ccfd60b146101235780634af2b4401461013a576100f3565b366100f357005b600080fd5b34801561010457600080fd5b5061010d610367565b60405161011a9190611074565b60405180910390f35b34801561012f57600080fd5b5061013861036c565b005b34801561014657600080fd5b5061014f6103c4565b60405161015c9190611074565b60405180910390f35b34801561017157600080fd5b5061018c600480360381019061018791906110c0565b6103cf565b60405161019a929190611108565b60405180910390f35b3480156101af57600080fd5b506101ca60048036038101906101c591906110c0565b610466565b6040516101d9939291906111a8565b60405180910390f35b3480156101ee57600080fd5b506101f76104b7565b005b34801561020557600080fd5b5061020e6104cb565b60405161021b9190611220565b60405180910390f35b34801561023057600080fd5b5061024b60048036038101906102469190611267565b6104f4565b005b610267600480360381019061026291906110c0565b6105f2565b005b34801561027557600080fd5b5061027e610797565b60405161028b9190611074565b60405180910390f35b3480156102a057600080fd5b506102a96107a2565b6040516102b691906112f3565b60405180910390f35b3480156102cb57600080fd5b506102d46107c8565b6040516102e19190611074565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c91906110c0565b6107d4565b005b34801561031f57600080fd5b50610328610e27565b6040516103359190611074565b60405180910390f35b34801561034a57600080fd5b5061036560048036038101906103609190611267565b610e33565b005b606481565b610374610eb9565b61037c6104cb565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156103c1573d6000803e3d6000fd5b50565b66354a6ba7a1800081565b60008060648310610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040c9061136b565b60405180910390fd5b6002600084815260200190815260200160002060000160009054906101000a900460ff166002600085815260200190815260200160002060000160029054906101000a900460ff1691509150915091565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a900460ff16905083565b6104bf610eb9565b6104c96000610f40565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104fc610eb9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361056b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610562906113d7565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fc026bf37ffb9004f36e978cd2fbc05a6e6ba7cc21fb9f7ce3a3bdc8a01e225e460405160405180910390a250565b6105fa611004565b6064811061063d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106349061136b565b60405180910390fd5b6002600082815260200190815260200160002060000160009054906101000a900460ff16156106a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069890611443565b60405180910390fd5b66354a6ba7a1800034146106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e1906114af565b60405180910390fd5b60016002600083815260200190815260200160002060000160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f465d1db9798268665147c6840d57ac3aaedc3df105a473c524c00a37ffd9add4826002600085815260200190815260200160002060000160019054906101000a900460ff166040516107849291906114cf565b60405180910390a261079461104a565b50565b66071afd498d000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b67016345785d8a000081565b6107dc611004565b6064811061081f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108169061136b565b60405180910390fd5b6002600082815260200190815260200160002060000160009054906101000a900460ff16610882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087990611544565b60405180910390fd5b6002600082815260200190815260200160002060000160029054906101000a900460ff16156108e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dd906115b0565b60405180910390fd5b6004808111156108f9576108f8611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff16600481111561092f5761092e611131565b5b03610aa157600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036109c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bc9061161c565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aa271e1a306040518263ffffffff1660e01b8152600401610a209190611220565b602060405180830381865afa158015610a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a619190611668565b610aa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a97906116e1565b60405180910390fd5b5b60016002600083815260200190815260200160002060000160026101000a81548160ff02191690831515021790555060016004811115610ae457610ae3611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610b1a57610b19611131565b5b03610b72573373ffffffffffffffffffffffffffffffffffffffff166108fc66071afd498d00009081150290604051600060405180830381858888f19350505050158015610b6c573d6000803e3d6000fd5b50610da9565b60026004811115610b8657610b85611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610bbc57610bbb611131565b5b03610c15573373ffffffffffffffffffffffffffffffffffffffff166108fc67016345785d8a00009081150290604051600060405180830381858888f19350505050158015610c0f573d6000803e3d6000fd5b50610da8565b60036004811115610c2957610c28611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610c5f57610c5e611131565b5b03610cb8573373ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051600060405180830381858888f19350505050158015610cb2573d6000803e3d6000fd5b50610da7565b600480811115610ccb57610cca611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610d0157610d00611131565b5b03610da657600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340d097c3336040518263ffffffff1660e01b8152600401610d619190611220565b6020604051808303816000875af1158015610d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da49190611716565b505b5b5b5b3373ffffffffffffffffffffffffffffffffffffffff167f53e3c45643a014901c16ab423f86c7d01176630d62d4adef2c2396f539fc6567826002600085815260200190815260200160002060000160019054906101000a900460ff16604051610e149291906114cf565b60405180910390a2610e2461104a565b50565b670de0b6b3a764000081565b610e3b610eb9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ead5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610ea49190611220565b60405180910390fd5b610eb681610f40565b50565b610ec1611053565b73ffffffffffffffffffffffffffffffffffffffff16610edf6104cb565b73ffffffffffffffffffffffffffffffffffffffff1614610f3e57610f02611053565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610f359190611220565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600260015403611040576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b600033905090565b6000819050919050565b61106e8161105b565b82525050565b60006020820190506110896000830184611065565b92915050565b600080fd5b61109d8161105b565b81146110a857600080fd5b50565b6000813590506110ba81611094565b92915050565b6000602082840312156110d6576110d561108f565b5b60006110e4848285016110ab565b91505092915050565b60008115159050919050565b611102816110ed565b82525050565b600060408201905061111d60008301856110f9565b61112a60208301846110f9565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061117157611170611131565b5b50565b600081905061118282611160565b919050565b600061119282611174565b9050919050565b6111a281611187565b82525050565b60006060820190506111bd60008301866110f9565b6111ca6020830185611199565b6111d760408301846110f9565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061120a826111df565b9050919050565b61121a816111ff565b82525050565b60006020820190506112356000830184611211565b92915050565b611244816111ff565b811461124f57600080fd5b50565b6000813590506112618161123b565b92915050565b60006020828403121561127d5761127c61108f565b5b600061128b84828501611252565b91505092915050565b6000819050919050565b60006112b96112b46112af846111df565b611294565b6111df565b9050919050565b60006112cb8261129e565b9050919050565b60006112dd826112c0565b9050919050565b6112ed816112d2565b82525050565b600060208201905061130860008301846112e4565b92915050565b600082825260208201905092915050565b7f496e76616c696420626f78204944000000000000000000000000000000000000600082015250565b6000611355600e8361130e565b91506113608261131f565b602082019050919050565b6000602082019050818103600083015261138481611348565b9050919050565b7f496e76616c6964204e465420746f6b656e206164647265737300000000000000600082015250565b60006113c160198361130e565b91506113cc8261138b565b602082019050919050565b600060208201905081810360008301526113f0816113b4565b9050919050565b7f426f7820616c7265616479206f70656e65640000000000000000000000000000600082015250565b600061142d60128361130e565b9150611438826113f7565b602082019050919050565b6000602082019050818103600083015261145c81611420565b9050919050565b7f496e636f7272656374207061796d656e7420616d6f756e740000000000000000600082015250565b600061149960188361130e565b91506114a482611463565b602082019050919050565b600060208201905081810360008301526114c88161148c565b9050919050565b60006040820190506114e46000830185611065565b6114f16020830184611199565b9392505050565b7f426f78206e6f74206f70656e6564207965740000000000000000000000000000600082015250565b600061152e60128361130e565b9150611539826114f8565b602082019050919050565b6000602082019050818103600083015261155d81611521565b9050919050565b7f5072697a6520616c726561647920636c61696d65640000000000000000000000600082015250565b600061159a60158361130e565b91506115a582611564565b602082019050919050565b600060208201905081810360008301526115c98161158d565b9050919050565b7f4e465420746f6b656e20636f6e7472616374206e6f7420736574000000000000600082015250565b6000611606601a8361130e565b9150611611826115d0565b602082019050919050565b60006020820190508181036000830152611635816115f9565b9050919050565b611645816110ed565b811461165057600080fd5b50565b6000815190506116628161163c565b92915050565b60006020828403121561167e5761167d61108f565b5b600061168c84828501611653565b91505092915050565b7f436f6e7472616374206e6f7420617574686f72697a656420746f206d696e7400600082015250565b60006116cb601f8361130e565b91506116d682611695565b602082019050919050565b600060208201905081810360008301526116fa816116be565b9050919050565b60008151905061171081611094565b92915050565b60006020828403121561172c5761172b61108f565b5b600061173a84828501611701565b9150509291505056fea264697066735822122028a180e5fbb420a21b88370da0124052763c2f5af9286ed4bf3432158126871c64736f6c63430008140033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "errors": {
          "OwnableInvalidOwner(address)": [
            {
              "details": "The owner is not a valid owner account. (eg. `address(0)`)"
            }
          ],
          "OwnableUnauthorizedAccount(address)": [
            {
              "details": "The caller account is not authorized to perform an operation."
            }
          ],
          "ReentrancyGuardReentrantCall()": [
            {
              "details": "Unauthorized reentrant call."
            }
          ]
        },
        "kind": "dev",
        "methods": {
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_2190": {
              "entryPoint": null,
              "id": 2190,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_50": {
              "entryPoint": null,
              "id": 50,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_7284": {
              "entryPoint": null,
              "id": 7284,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_initializeBoxes_7515": {
              "entryPoint": 379,
              "id": 7515,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_transferOwnership_146": {
              "entryPoint": 183,
              "id": 146,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_encode_t_address_to_t_address_fromStack": {
              "entryPoint": 2157,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack": {
              "entryPoint": 2559,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_tuple_packed_t_uint256_t_uint256__to_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 2586,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": 2174,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 2490,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 2431,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "cleanup_t_address": {
              "entryPoint": 2137,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint160": {
              "entryPoint": 2105,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint256": {
              "entryPoint": 2344,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "decrement_t_uint256": {
              "entryPoint": 2737,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 2354,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "leftAlign_t_uint256": {
              "entryPoint": 2549,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mod_t_uint256": {
              "entryPoint": 2681,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 2297,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x12": {
              "entryPoint": 2634,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x21": {
              "entryPoint": 2783,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 2250,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 2203,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:3249:25",
                "statements": [
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "52:81:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "62:65:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "77:5:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "84:42:25",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "73:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "73:54:25"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "62:7:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint160",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "34:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "44:7:25",
                        "type": ""
                      }
                    ],
                    "src": "7:126:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "184:51:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "194:35:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "223:5:25"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nodeType": "YulIdentifier",
                              "src": "205:17:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "205:24:25"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "194:7:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "166:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "176:7:25",
                        "type": ""
                      }
                    ],
                    "src": "139:96:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "306:53:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "323:3:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "346:5:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "328:17:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "328:24:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "316:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "316:37:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "316:37:25"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "294:5:25",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "301:3:25",
                        "type": ""
                      }
                    ],
                    "src": "241:118:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "463:124:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "473:26:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "485:9:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "496:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "481:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "481:18:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "473:4:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "553:6:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "566:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "577:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "562:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "562:17:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "509:43:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "509:71:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "509:71:25"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "435:9:25",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "447:6:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "458:4:25",
                        "type": ""
                      }
                    ],
                    "src": "365:222:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "621:152:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "638:1:25",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "641:77:25",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "631:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "631:88:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "631:88:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "735:1:25",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "738:4:25",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "728:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "728:15:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "728:15:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "759:1:25",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "762:4:25",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "752:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "752:15:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "752:15:25"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "593:180:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "807:152:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "824:1:25",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "827:77:25",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "817:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "817:88:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "817:88:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "921:1:25",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "924:4:25",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "914:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "914:15:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "914:15:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "945:1:25",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "948:4:25",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "938:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "938:15:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "938:15:25"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "779:180:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "993:152:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1010:1:25",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1013:77:25",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1003:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1003:88:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1003:88:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1107:1:25",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1110:4:25",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1100:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1100:15:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1100:15:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1131:1:25",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1134:4:25",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "1124:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1124:15:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1124:15:25"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "965:180:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1196:32:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1206:16:25",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1217:5:25"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "1206:7:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1178:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "1188:7:25",
                        "type": ""
                      }
                    ],
                    "src": "1151:77:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1277:190:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1287:33:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1314:5:25"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "1296:17:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1296:24:25"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "1287:5:25"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1410:22:25",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1412:16:25"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1412:18:25"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1412:18:25"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1335:5:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1342:66:25",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "1332:2:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1332:77:25"
                          },
                          "nodeType": "YulIf",
                          "src": "1329:103:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1441:20:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1452:5:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1459:1:25",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1448:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1448:13:25"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "1441:3:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1263:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "1273:3:25",
                        "type": ""
                      }
                    ],
                    "src": "1234:233:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1518:149:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1528:25:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "1551:1:25"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "1533:17:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1533:20:25"
                          },
                          "variableNames": [
                            {
                              "name": "x",
                              "nodeType": "YulIdentifier",
                              "src": "1528:1:25"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1562:25:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "1585:1:25"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "1567:17:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1567:20:25"
                          },
                          "variableNames": [
                            {
                              "name": "y",
                              "nodeType": "YulIdentifier",
                              "src": "1562:1:25"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1596:17:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "1608:1:25"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "1611:1:25"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1604:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1604:9:25"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "1596:4:25"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1638:22:25",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1640:16:25"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1640:18:25"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1640:18:25"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "1629:4:25"
                              },
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "1635:1:25"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1626:2:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1626:11:25"
                          },
                          "nodeType": "YulIf",
                          "src": "1623:37:25"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "1504:1:25",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "1507:1:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "1513:4:25",
                        "type": ""
                      }
                    ],
                    "src": "1473:194:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1717:147:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1727:25:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "1750:1:25"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "1732:17:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1732:20:25"
                          },
                          "variableNames": [
                            {
                              "name": "x",
                              "nodeType": "YulIdentifier",
                              "src": "1727:1:25"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1761:25:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "1784:1:25"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "1766:17:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1766:20:25"
                          },
                          "variableNames": [
                            {
                              "name": "y",
                              "nodeType": "YulIdentifier",
                              "src": "1761:1:25"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1795:16:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "1806:1:25"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "1809:1:25"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1802:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1802:9:25"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "1795:3:25"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1835:22:25",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1837:16:25"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1837:18:25"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1837:18:25"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "1827:1:25"
                              },
                              {
                                "name": "sum",
                                "nodeType": "YulIdentifier",
                                "src": "1830:3:25"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1824:2:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1824:10:25"
                          },
                          "nodeType": "YulIf",
                          "src": "1821:36:25"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "1704:1:25",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "1707:1:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "1713:3:25",
                        "type": ""
                      }
                    ],
                    "src": "1673:191:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1917:32:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1927:16:25",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1938:5:25"
                          },
                          "variableNames": [
                            {
                              "name": "aligned",
                              "nodeType": "YulIdentifier",
                              "src": "1927:7:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "leftAlign_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1899:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "aligned",
                        "nodeType": "YulTypedName",
                        "src": "1909:7:25",
                        "type": ""
                      }
                    ],
                    "src": "1870:79:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2038:74:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2055:3:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "2098:5:25"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint256",
                                      "nodeType": "YulIdentifier",
                                      "src": "2080:17:25"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2080:24:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "leftAlign_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "2060:19:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2060:45:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2048:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2048:58:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2048:58:25"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2026:5:25",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2033:3:25",
                        "type": ""
                      }
                    ],
                    "src": "1955:157:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2262:253:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2335:6:25"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2344:3:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "2273:61:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2273:75:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2273:75:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2357:19:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2368:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2373:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2364:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2364:12:25"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "2357:3:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "2448:6:25"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2457:3:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "2386:61:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2386:75:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2386:75:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2470:19:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2481:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2486:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2477:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2477:12:25"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "2470:3:25"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2499:10:25",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "2506:3:25"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "2499:3:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_uint256_t_uint256__to_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2233:3:25",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2239:6:25",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2247:6:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2258:3:25",
                        "type": ""
                      }
                    ],
                    "src": "2118:397:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2549:152:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2566:1:25",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2569:77:25",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2559:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2559:88:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2559:88:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2663:1:25",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2666:4:25",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2656:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2656:15:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2656:15:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2687:1:25",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2690:4:25",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "2680:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2680:15:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2680:15:25"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "2521:180:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2741:142:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2751:25:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "2774:1:25"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "2756:17:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2756:20:25"
                          },
                          "variableNames": [
                            {
                              "name": "x",
                              "nodeType": "YulIdentifier",
                              "src": "2751:1:25"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2785:25:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "2808:1:25"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "2790:17:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2790:20:25"
                          },
                          "variableNames": [
                            {
                              "name": "y",
                              "nodeType": "YulIdentifier",
                              "src": "2785:1:25"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2832:22:25",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "2834:16:25"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2834:18:25"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2834:18:25"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "2829:1:25"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2822:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2822:9:25"
                          },
                          "nodeType": "YulIf",
                          "src": "2819:35:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2863:14:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "2872:1:25"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "2875:1:25"
                              }
                            ],
                            "functionName": {
                              "name": "mod",
                              "nodeType": "YulIdentifier",
                              "src": "2868:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2868:9:25"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "2863:1:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mod_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "2730:1:25",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "2733:1:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "2739:1:25",
                        "type": ""
                      }
                    ],
                    "src": "2707:176:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2932:128:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2942:33:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2969:5:25"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "2951:17:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2951:24:25"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "2942:5:25"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3003:22:25",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "3005:16:25"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3005:18:25"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3005:18:25"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2990:5:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2997:4:25",
                                "type": "",
                                "value": "0x00"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "2987:2:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2987:15:25"
                          },
                          "nodeType": "YulIf",
                          "src": "2984:41:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3034:20:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3045:5:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3052:1:25",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3041:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3041:13:25"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "3034:3:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "decrement_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2918:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "2928:3:25",
                        "type": ""
                      }
                    ],
                    "src": "2889:171:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3094:152:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3111:1:25",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3114:77:25",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3104:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3104:88:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3104:88:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3208:1:25",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3211:4:25",
                                "type": "",
                                "value": "0x21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3201:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3201:15:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3201:15:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3232:1:25",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3235:4:25",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "3225:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3225:15:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3225:15:25"
                        }
                      ]
                    },
                    "name": "panic_error_0x21",
                    "nodeType": "YulFunctionDefinition",
                    "src": "3066:180:25"
                  }
                ]
              },
              "contents": "{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function leftAlign_t_uint256(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_uint256(cleanup_t_uint256(value)))\n    }\n\n    function abi_encode_tuple_packed_t_uint256_t_uint256__to_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 32)\n\n        end := pos\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n}\n",
              "id": 25,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "60806040523480156200001157600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000885760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200007f91906200087e565b60405180910390fd5b6200009981620000b760201b60201c565b5060018081905550620000b16200017b60201b60201c565b62000b0e565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000606467ffffffffffffffff8111156200019b576200019a6200089b565b5b604051908082528060200260200182016040528015620001ca5781602001602082028036833780820191505090505b50905060005b6064811015620002135780828281518110620001f157620001f0620008ca565b5b60200260200101818152505080806200020a9062000932565b915050620001d0565b506000600160646200022691906200097f565b90505b600081111562000317576000600182620002449190620009ba565b42836040516020016200025992919062000a1a565b6040516020818303038152906040528051906020012060001c6200027e919062000a79565b9050828181518110620002965762000295620008ca565b5b6020026020010151838381518110620002b457620002b3620008ca565b5b6020026020010151848481518110620002d257620002d1620008ca565b5b60200260200101858481518110620002ef57620002ee620008ca565b5b60200260200101828152508281525050505080806200030e9062000ab1565b91505062000229565b50600060405180606001604052806000151581526020016003600481111562000345576200034462000adf565b5b81526020016000151581525060026000848480620003639062000932565b955081518110620003795762000378620008ca565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836004811115620003dd57620003dc62000adf565b5b021790555060408201518160000160026101000a81548160ff02191690831515021790555090505060005b600381101562000513576040518060600160405280600015158152602001600260048111156200043d576200043c62000adf565b5b815260200160001515815250600260008585806200045b9062000932565b965081518110620004715762000470620008ca565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836004811115620004d557620004d462000adf565b5b021790555060408201518160000160026101000a81548160ff02191690831515021790555090505080806200050a9062000932565b91505062000408565b5060005b600f81101562000622576040518060600160405280600015158152602001600160048111156200054c576200054b62000adf565b5b815260200160001515815250600260008585806200056a9062000932565b96508151811062000580576200057f620008ca565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836004811115620005e457620005e362000adf565b5b021790555060408201518160000160026101000a81548160ff0219169083151502179055509050508080620006199062000932565b91505062000517565b5060005b6006811015620007305760405180606001604052806000151581526020016004808111156200065a576200065962000adf565b5b81526020016000151581525060026000858580620006789062000932565b9650815181106200068e576200068d620008ca565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836004811115620006f257620006f162000adf565b5b021790555060408201518160000160026101000a81548160ff0219169083151502179055509050508080620007279062000932565b91505062000626565b5060008190505b606481101562000834576040518060600160405280600015158152602001600060048111156200076c576200076b62000adf565b5b81526020016000151581525060026000858481518110620007925762000791620008ca565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836004811115620007f657620007f562000adf565b5b021790555060408201518160000160026101000a81548160ff02191690831515021790555090505080806200082b9062000932565b91505062000737565b505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008668262000839565b9050919050565b620008788162000859565b82525050565b60006020820190506200089560008301846200086d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006200093f8262000928565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620009745762000973620008f9565b5b600182019050919050565b60006200098c8262000928565b9150620009998362000928565b9250828203905081811115620009b457620009b3620008f9565b5b92915050565b6000620009c78262000928565b9150620009d48362000928565b9250828201905080821115620009ef57620009ee620008f9565b5b92915050565b6000819050919050565b62000a1462000a0e8262000928565b620009f5565b82525050565b600062000a288285620009ff565b60208201915062000a3a8284620009ff565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000a868262000928565b915062000a938362000928565b92508262000aa65762000aa562000a4a565b5b828206905092915050565b600062000abe8262000928565b91506000820362000ad45762000ad3620008f9565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6117798062000b1e6000396000f3fe6080604052600436106100ec5760003560e01c8063a921bc5b1161008a578063d4b3c61711610059578063d4b3c617146102bf578063d7098154146102ea578063eb9780cc14610313578063f2fde38b1461033e576100f3565b8063a921bc5b14610224578063b1e5e2b71461024d578063b8b3b48d14610269578063d06fcba814610294576100f3565b80634dfa3444116100c65780634dfa3444146101655780634ed3faf2146101a3578063715018a6146101e25780638da5cb5b146101f9576100f3565b8063373692dc146100f85780633ccfd60b146101235780634af2b4401461013a576100f3565b366100f357005b600080fd5b34801561010457600080fd5b5061010d610367565b60405161011a9190611074565b60405180910390f35b34801561012f57600080fd5b5061013861036c565b005b34801561014657600080fd5b5061014f6103c4565b60405161015c9190611074565b60405180910390f35b34801561017157600080fd5b5061018c600480360381019061018791906110c0565b6103cf565b60405161019a929190611108565b60405180910390f35b3480156101af57600080fd5b506101ca60048036038101906101c591906110c0565b610466565b6040516101d9939291906111a8565b60405180910390f35b3480156101ee57600080fd5b506101f76104b7565b005b34801561020557600080fd5b5061020e6104cb565b60405161021b9190611220565b60405180910390f35b34801561023057600080fd5b5061024b60048036038101906102469190611267565b6104f4565b005b610267600480360381019061026291906110c0565b6105f2565b005b34801561027557600080fd5b5061027e610797565b60405161028b9190611074565b60405180910390f35b3480156102a057600080fd5b506102a96107a2565b6040516102b691906112f3565b60405180910390f35b3480156102cb57600080fd5b506102d46107c8565b6040516102e19190611074565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c91906110c0565b6107d4565b005b34801561031f57600080fd5b50610328610e27565b6040516103359190611074565b60405180910390f35b34801561034a57600080fd5b5061036560048036038101906103609190611267565b610e33565b005b606481565b610374610eb9565b61037c6104cb565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156103c1573d6000803e3d6000fd5b50565b66354a6ba7a1800081565b60008060648310610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040c9061136b565b60405180910390fd5b6002600084815260200190815260200160002060000160009054906101000a900460ff166002600085815260200190815260200160002060000160029054906101000a900460ff1691509150915091565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a900460ff16905083565b6104bf610eb9565b6104c96000610f40565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104fc610eb9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361056b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610562906113d7565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fc026bf37ffb9004f36e978cd2fbc05a6e6ba7cc21fb9f7ce3a3bdc8a01e225e460405160405180910390a250565b6105fa611004565b6064811061063d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106349061136b565b60405180910390fd5b6002600082815260200190815260200160002060000160009054906101000a900460ff16156106a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069890611443565b60405180910390fd5b66354a6ba7a1800034146106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e1906114af565b60405180910390fd5b60016002600083815260200190815260200160002060000160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f465d1db9798268665147c6840d57ac3aaedc3df105a473c524c00a37ffd9add4826002600085815260200190815260200160002060000160019054906101000a900460ff166040516107849291906114cf565b60405180910390a261079461104a565b50565b66071afd498d000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b67016345785d8a000081565b6107dc611004565b6064811061081f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108169061136b565b60405180910390fd5b6002600082815260200190815260200160002060000160009054906101000a900460ff16610882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087990611544565b60405180910390fd5b6002600082815260200190815260200160002060000160029054906101000a900460ff16156108e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dd906115b0565b60405180910390fd5b6004808111156108f9576108f8611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff16600481111561092f5761092e611131565b5b03610aa157600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036109c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bc9061161c565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aa271e1a306040518263ffffffff1660e01b8152600401610a209190611220565b602060405180830381865afa158015610a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a619190611668565b610aa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a97906116e1565b60405180910390fd5b5b60016002600083815260200190815260200160002060000160026101000a81548160ff02191690831515021790555060016004811115610ae457610ae3611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610b1a57610b19611131565b5b03610b72573373ffffffffffffffffffffffffffffffffffffffff166108fc66071afd498d00009081150290604051600060405180830381858888f19350505050158015610b6c573d6000803e3d6000fd5b50610da9565b60026004811115610b8657610b85611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610bbc57610bbb611131565b5b03610c15573373ffffffffffffffffffffffffffffffffffffffff166108fc67016345785d8a00009081150290604051600060405180830381858888f19350505050158015610c0f573d6000803e3d6000fd5b50610da8565b60036004811115610c2957610c28611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610c5f57610c5e611131565b5b03610cb8573373ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051600060405180830381858888f19350505050158015610cb2573d6000803e3d6000fd5b50610da7565b600480811115610ccb57610cca611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610d0157610d00611131565b5b03610da657600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340d097c3336040518263ffffffff1660e01b8152600401610d619190611220565b6020604051808303816000875af1158015610d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da49190611716565b505b5b5b5b3373ffffffffffffffffffffffffffffffffffffffff167f53e3c45643a014901c16ab423f86c7d01176630d62d4adef2c2396f539fc6567826002600085815260200190815260200160002060000160019054906101000a900460ff16604051610e149291906114cf565b60405180910390a2610e2461104a565b50565b670de0b6b3a764000081565b610e3b610eb9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ead5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610ea49190611220565b60405180910390fd5b610eb681610f40565b50565b610ec1611053565b73ffffffffffffffffffffffffffffffffffffffff16610edf6104cb565b73ffffffffffffffffffffffffffffffffffffffff1614610f3e57610f02611053565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610f359190611220565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600260015403611040576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b600033905090565b6000819050919050565b61106e8161105b565b82525050565b60006020820190506110896000830184611065565b92915050565b600080fd5b61109d8161105b565b81146110a857600080fd5b50565b6000813590506110ba81611094565b92915050565b6000602082840312156110d6576110d561108f565b5b60006110e4848285016110ab565b91505092915050565b60008115159050919050565b611102816110ed565b82525050565b600060408201905061111d60008301856110f9565b61112a60208301846110f9565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061117157611170611131565b5b50565b600081905061118282611160565b919050565b600061119282611174565b9050919050565b6111a281611187565b82525050565b60006060820190506111bd60008301866110f9565b6111ca6020830185611199565b6111d760408301846110f9565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061120a826111df565b9050919050565b61121a816111ff565b82525050565b60006020820190506112356000830184611211565b92915050565b611244816111ff565b811461124f57600080fd5b50565b6000813590506112618161123b565b92915050565b60006020828403121561127d5761127c61108f565b5b600061128b84828501611252565b91505092915050565b6000819050919050565b60006112b96112b46112af846111df565b611294565b6111df565b9050919050565b60006112cb8261129e565b9050919050565b60006112dd826112c0565b9050919050565b6112ed816112d2565b82525050565b600060208201905061130860008301846112e4565b92915050565b600082825260208201905092915050565b7f496e76616c696420626f78204944000000000000000000000000000000000000600082015250565b6000611355600e8361130e565b91506113608261131f565b602082019050919050565b6000602082019050818103600083015261138481611348565b9050919050565b7f496e76616c6964204e465420746f6b656e206164647265737300000000000000600082015250565b60006113c160198361130e565b91506113cc8261138b565b602082019050919050565b600060208201905081810360008301526113f0816113b4565b9050919050565b7f426f7820616c7265616479206f70656e65640000000000000000000000000000600082015250565b600061142d60128361130e565b9150611438826113f7565b602082019050919050565b6000602082019050818103600083015261145c81611420565b9050919050565b7f496e636f7272656374207061796d656e7420616d6f756e740000000000000000600082015250565b600061149960188361130e565b91506114a482611463565b602082019050919050565b600060208201905081810360008301526114c88161148c565b9050919050565b60006040820190506114e46000830185611065565b6114f16020830184611199565b9392505050565b7f426f78206e6f74206f70656e6564207965740000000000000000000000000000600082015250565b600061152e60128361130e565b9150611539826114f8565b602082019050919050565b6000602082019050818103600083015261155d81611521565b9050919050565b7f5072697a6520616c726561647920636c61696d65640000000000000000000000600082015250565b600061159a60158361130e565b91506115a582611564565b602082019050919050565b600060208201905081810360008301526115c98161158d565b9050919050565b7f4e465420746f6b656e20636f6e7472616374206e6f7420736574000000000000600082015250565b6000611606601a8361130e565b9150611611826115d0565b602082019050919050565b60006020820190508181036000830152611635816115f9565b9050919050565b611645816110ed565b811461165057600080fd5b50565b6000815190506116628161163c565b92915050565b60006020828403121561167e5761167d61108f565b5b600061168c84828501611653565b91505092915050565b7f436f6e7472616374206e6f7420617574686f72697a656420746f206d696e7400600082015250565b60006116cb601f8361130e565b91506116d682611695565b602082019050919050565b600060208201905081810360008301526116fa816116be565b9050919050565b60008151905061171081611094565b92915050565b60006020828403121561172c5761172b61108f565b5b600061173a84828501611701565b9150509291505056fea264697066735822122028a180e5fbb420a21b88370da0124052763c2f5af9286ed4bf3432158126871c64736f6c63430008140033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x88 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x7F SWAP2 SWAP1 PUSH3 0x87E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x99 DUP2 PUSH3 0xB7 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP PUSH3 0xB1 PUSH3 0x17B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xB0E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x19B JUMPI PUSH3 0x19A PUSH3 0x89B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x1CA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x64 DUP2 LT ISZERO PUSH3 0x213 JUMPI DUP1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x1F1 JUMPI PUSH3 0x1F0 PUSH3 0x8CA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP1 PUSH3 0x20A SWAP1 PUSH3 0x932 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x1D0 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x64 PUSH3 0x226 SWAP2 SWAP1 PUSH3 0x97F JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP2 GT ISZERO PUSH3 0x317 JUMPI PUSH1 0x0 PUSH1 0x1 DUP3 PUSH3 0x244 SWAP2 SWAP1 PUSH3 0x9BA JUMP JUMPDEST TIMESTAMP DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x259 SWAP3 SWAP2 SWAP1 PUSH3 0xA1A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR PUSH3 0x27E SWAP2 SWAP1 PUSH3 0xA79 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH3 0x296 JUMPI PUSH3 0x295 PUSH3 0x8CA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0x2B4 JUMPI PUSH3 0x2B3 PUSH3 0x8CA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0x2D2 JUMPI PUSH3 0x2D1 PUSH3 0x8CA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0x2EF JUMPI PUSH3 0x2EE PUSH3 0x8CA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP POP DUP1 DUP1 PUSH3 0x30E SWAP1 PUSH3 0xAB1 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x229 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x345 JUMPI PUSH3 0x344 PUSH3 0xADF JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP5 DUP5 DUP1 PUSH3 0x363 SWAP1 PUSH3 0x932 JUMP JUMPDEST SWAP6 POP DUP2 MLOAD DUP2 LT PUSH3 0x379 JUMPI PUSH3 0x378 PUSH3 0x8CA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x3DD JUMPI PUSH3 0x3DC PUSH3 0xADF JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH3 0x513 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x43D JUMPI PUSH3 0x43C PUSH3 0xADF JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP6 DUP6 DUP1 PUSH3 0x45B SWAP1 PUSH3 0x932 JUMP JUMPDEST SWAP7 POP DUP2 MLOAD DUP2 LT PUSH3 0x471 JUMPI PUSH3 0x470 PUSH3 0x8CA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x4D5 JUMPI PUSH3 0x4D4 PUSH3 0xADF JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP1 DUP1 PUSH3 0x50A SWAP1 PUSH3 0x932 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x408 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0xF DUP2 LT ISZERO PUSH3 0x622 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x54C JUMPI PUSH3 0x54B PUSH3 0xADF JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP6 DUP6 DUP1 PUSH3 0x56A SWAP1 PUSH3 0x932 JUMP JUMPDEST SWAP7 POP DUP2 MLOAD DUP2 LT PUSH3 0x580 JUMPI PUSH3 0x57F PUSH3 0x8CA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x5E4 JUMPI PUSH3 0x5E3 PUSH3 0xADF JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP1 DUP1 PUSH3 0x619 SWAP1 PUSH3 0x932 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x517 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x6 DUP2 LT ISZERO PUSH3 0x730 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP1 DUP2 GT ISZERO PUSH3 0x65A JUMPI PUSH3 0x659 PUSH3 0xADF JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP6 DUP6 DUP1 PUSH3 0x678 SWAP1 PUSH3 0x932 JUMP JUMPDEST SWAP7 POP DUP2 MLOAD DUP2 LT PUSH3 0x68E JUMPI PUSH3 0x68D PUSH3 0x8CA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x6F2 JUMPI PUSH3 0x6F1 PUSH3 0xADF JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP1 DUP1 PUSH3 0x727 SWAP1 PUSH3 0x932 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x626 JUMP JUMPDEST POP PUSH1 0x0 DUP2 SWAP1 POP JUMPDEST PUSH1 0x64 DUP2 LT ISZERO PUSH3 0x834 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x76C JUMPI PUSH3 0x76B PUSH3 0xADF JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0x792 JUMPI PUSH3 0x791 PUSH3 0x8CA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x7F6 JUMPI PUSH3 0x7F5 PUSH3 0xADF JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP1 DUP1 PUSH3 0x82B SWAP1 PUSH3 0x932 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x737 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x866 DUP3 PUSH3 0x839 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x878 DUP2 PUSH3 0x859 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x895 PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x86D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93F DUP3 PUSH3 0x928 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH3 0x974 JUMPI PUSH3 0x973 PUSH3 0x8F9 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x98C DUP3 PUSH3 0x928 JUMP JUMPDEST SWAP2 POP PUSH3 0x999 DUP4 PUSH3 0x928 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH3 0x9B4 JUMPI PUSH3 0x9B3 PUSH3 0x8F9 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x9C7 DUP3 PUSH3 0x928 JUMP JUMPDEST SWAP2 POP PUSH3 0x9D4 DUP4 PUSH3 0x928 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH3 0x9EF JUMPI PUSH3 0x9EE PUSH3 0x8F9 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0xA14 PUSH3 0xA0E DUP3 PUSH3 0x928 JUMP JUMPDEST PUSH3 0x9F5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xA28 DUP3 DUP6 PUSH3 0x9FF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH3 0xA3A DUP3 DUP5 PUSH3 0x9FF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0xA86 DUP3 PUSH3 0x928 JUMP JUMPDEST SWAP2 POP PUSH3 0xA93 DUP4 PUSH3 0x928 JUMP JUMPDEST SWAP3 POP DUP3 PUSH3 0xAA6 JUMPI PUSH3 0xAA5 PUSH3 0xA4A JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xABE DUP3 PUSH3 0x928 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH3 0xAD4 JUMPI PUSH3 0xAD3 PUSH3 0x8F9 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1779 DUP1 PUSH3 0xB1E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA921BC5B GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xD4B3C617 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xD4B3C617 EQ PUSH2 0x2BF JUMPI DUP1 PUSH4 0xD7098154 EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0xEB9780CC EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x33E JUMPI PUSH2 0xF3 JUMP JUMPDEST DUP1 PUSH4 0xA921BC5B EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB1E5E2B7 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0xB8B3B48D EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0xD06FCBA8 EQ PUSH2 0x294 JUMPI PUSH2 0xF3 JUMP JUMPDEST DUP1 PUSH4 0x4DFA3444 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x4DFA3444 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x4ED3FAF2 EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1F9 JUMPI PUSH2 0xF3 JUMP JUMPDEST DUP1 PUSH4 0x373692DC EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x4AF2B440 EQ PUSH2 0x13A JUMPI PUSH2 0xF3 JUMP JUMPDEST CALLDATASIZE PUSH2 0xF3 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x367 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x1074 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x36C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x3C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x1074 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x187 SWAP2 SWAP1 PUSH2 0x10C0 JUMP JUMPDEST PUSH2 0x3CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19A SWAP3 SWAP2 SWAP1 PUSH2 0x1108 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C5 SWAP2 SWAP1 PUSH2 0x10C0 JUMP JUMPDEST PUSH2 0x466 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x4B7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x205 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH2 0x4CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1220 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x246 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH2 0x4F4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x267 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x262 SWAP2 SWAP1 PUSH2 0x10C0 JUMP JUMPDEST PUSH2 0x5F2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0x797 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x1074 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A9 PUSH2 0x7A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B6 SWAP2 SWAP1 PUSH2 0x12F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E1 SWAP2 SWAP1 PUSH2 0x1074 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x311 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x30C SWAP2 SWAP1 PUSH2 0x10C0 JUMP JUMPDEST PUSH2 0x7D4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x328 PUSH2 0xE27 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x335 SWAP2 SWAP1 PUSH2 0x1074 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x365 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x360 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH2 0xE33 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x64 DUP2 JUMP JUMPDEST PUSH2 0x374 PUSH2 0xEB9 JUMP JUMPDEST PUSH2 0x37C PUSH2 0x4CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x3C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH7 0x354A6BA7A18000 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x64 DUP4 LT PUSH2 0x415 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x136B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP4 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0xEB9 JUMP JUMPDEST PUSH2 0x4C9 PUSH1 0x0 PUSH2 0xF40 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x4FC PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x56B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x562 SWAP1 PUSH2 0x13D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC026BF37FFB9004F36E978CD2FBC05A6E6BA7CC21FB9F7CE3A3BDC8A01E225E4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x5FA PUSH2 0x1004 JUMP JUMPDEST PUSH1 0x64 DUP2 LT PUSH2 0x63D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x634 SWAP1 PUSH2 0x136B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x6A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x698 SWAP1 PUSH2 0x1443 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH7 0x354A6BA7A18000 CALLVALUE EQ PUSH2 0x6EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E1 SWAP1 PUSH2 0x14AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x465D1DB9798268665147C6840D57AC3AAEDC3DF105A473C524C00A37FFD9ADD4 DUP3 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x40 MLOAD PUSH2 0x784 SWAP3 SWAP2 SWAP1 PUSH2 0x14CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x794 PUSH2 0x104A JUMP JUMPDEST POP JUMP JUMPDEST PUSH7 0x71AFD498D0000 DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH8 0x16345785D8A0000 DUP2 JUMP JUMPDEST PUSH2 0x7DC PUSH2 0x1004 JUMP JUMPDEST PUSH1 0x64 DUP2 LT PUSH2 0x81F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x816 SWAP1 PUSH2 0x136B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x882 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x879 SWAP1 PUSH2 0x1544 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DD SWAP1 PUSH2 0x15B0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP1 DUP2 GT ISZERO PUSH2 0x8F9 JUMPI PUSH2 0x8F8 PUSH2 0x1131 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x92F JUMPI PUSH2 0x92E PUSH2 0x1131 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xAA1 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9BC SWAP1 PUSH2 0x161C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAA271E1A ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA20 SWAP2 SWAP1 PUSH2 0x1220 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA3D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA61 SWAP2 SWAP1 PUSH2 0x1668 JUMP JUMPDEST PUSH2 0xAA0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA97 SWAP1 PUSH2 0x16E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xAE4 JUMPI PUSH2 0xAE3 PUSH2 0x1131 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB1A JUMPI PUSH2 0xB19 PUSH2 0x1131 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xB72 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH7 0x71AFD498D0000 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xB6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xDA9 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB86 JUMPI PUSH2 0xB85 PUSH2 0x1131 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xBBC JUMPI PUSH2 0xBBB PUSH2 0x1131 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xC15 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH8 0x16345785D8A0000 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xC0F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xDA8 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xC29 JUMPI PUSH2 0xC28 PUSH2 0x1131 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xC5F JUMPI PUSH2 0xC5E PUSH2 0x1131 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xCB8 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH8 0xDE0B6B3A7640000 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xCB2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xDA7 JUMP JUMPDEST PUSH1 0x4 DUP1 DUP2 GT ISZERO PUSH2 0xCCB JUMPI PUSH2 0xCCA PUSH2 0x1131 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xD01 JUMPI PUSH2 0xD00 PUSH2 0x1131 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xDA6 JUMPI PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x40D097C3 CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD61 SWAP2 SWAP1 PUSH2 0x1220 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD80 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDA4 SWAP2 SWAP1 PUSH2 0x1716 JUMP JUMPDEST POP JUMPDEST JUMPDEST JUMPDEST JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x53E3C45643A014901C16AB423F86C7D01176630D62D4ADEF2C2396F539FC6567 DUP3 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x40 MLOAD PUSH2 0xE14 SWAP3 SWAP2 SWAP1 PUSH2 0x14CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0xE24 PUSH2 0x104A JUMP JUMPDEST POP JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST PUSH2 0xE3B PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEAD JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEA4 SWAP2 SWAP1 PUSH2 0x1220 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB6 DUP2 PUSH2 0xF40 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xEC1 PUSH2 0x1053 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xEDF PUSH2 0x4CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xF3E JUMPI PUSH2 0xF02 PUSH2 0x1053 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF35 SWAP2 SWAP1 PUSH2 0x1220 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0x1040 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x106E DUP2 PUSH2 0x105B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1089 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1065 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x109D DUP2 PUSH2 0x105B JUMP JUMPDEST DUP2 EQ PUSH2 0x10A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x10BA DUP2 PUSH2 0x1094 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10D6 JUMPI PUSH2 0x10D5 PUSH2 0x108F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10E4 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1102 DUP2 PUSH2 0x10ED JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x111D PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x10F9 JUMP JUMPDEST PUSH2 0x112A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x10F9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0x1171 JUMPI PUSH2 0x1170 PUSH2 0x1131 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x1182 DUP3 PUSH2 0x1160 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1192 DUP3 PUSH2 0x1174 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11A2 DUP2 PUSH2 0x1187 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x11BD PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x10F9 JUMP JUMPDEST PUSH2 0x11CA PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1199 JUMP JUMPDEST PUSH2 0x11D7 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x10F9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120A DUP3 PUSH2 0x11DF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x121A DUP2 PUSH2 0x11FF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1235 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1211 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1244 DUP2 PUSH2 0x11FF JUMP JUMPDEST DUP2 EQ PUSH2 0x124F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1261 DUP2 PUSH2 0x123B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x127D JUMPI PUSH2 0x127C PUSH2 0x108F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x128B DUP5 DUP3 DUP6 ADD PUSH2 0x1252 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12B9 PUSH2 0x12B4 PUSH2 0x12AF DUP5 PUSH2 0x11DF JUMP JUMPDEST PUSH2 0x1294 JUMP JUMPDEST PUSH2 0x11DF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12CB DUP3 PUSH2 0x129E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12DD DUP3 PUSH2 0x12C0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12ED DUP2 PUSH2 0x12D2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1308 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x12E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E76616C696420626F78204944000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1355 PUSH1 0xE DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x1360 DUP3 PUSH2 0x131F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1384 DUP2 PUSH2 0x1348 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C6964204E465420746F6B656E206164647265737300000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13C1 PUSH1 0x19 DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x13CC DUP3 PUSH2 0x138B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x13F0 DUP2 PUSH2 0x13B4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x426F7820616C7265616479206F70656E65640000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x142D PUSH1 0x12 DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x1438 DUP3 PUSH2 0x13F7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x145C DUP2 PUSH2 0x1420 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E636F7272656374207061796D656E7420616D6F756E740000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1499 PUSH1 0x18 DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x14A4 DUP3 PUSH2 0x1463 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14C8 DUP2 PUSH2 0x148C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x14E4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1065 JUMP JUMPDEST PUSH2 0x14F1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1199 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x426F78206E6F74206F70656E6564207965740000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x152E PUSH1 0x12 DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x1539 DUP3 PUSH2 0x14F8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x155D DUP2 PUSH2 0x1521 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5072697A6520616C726561647920636C61696D65640000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x159A PUSH1 0x15 DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x15A5 DUP3 PUSH2 0x1564 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x15C9 DUP2 PUSH2 0x158D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E465420746F6B656E20636F6E7472616374206E6F7420736574000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1606 PUSH1 0x1A DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x1611 DUP3 PUSH2 0x15D0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1635 DUP2 PUSH2 0x15F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1645 DUP2 PUSH2 0x10ED JUMP JUMPDEST DUP2 EQ PUSH2 0x1650 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1662 DUP2 PUSH2 0x163C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x167E JUMPI PUSH2 0x167D PUSH2 0x108F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x168C DUP5 DUP3 DUP6 ADD PUSH2 0x1653 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x436F6E7472616374206E6F7420617574686F72697A656420746F206D696E7400 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16CB PUSH1 0x1F DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x16D6 DUP3 PUSH2 0x1695 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x16FA DUP2 PUSH2 0x16BE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1710 DUP2 PUSH2 0x1094 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x172C JUMPI PUSH2 0x172B PUSH2 0x108F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x173A DUP5 DUP3 DUP6 ADD PUSH2 0x1701 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 LOG1 DUP1 0xE5 0xFB 0xB4 KECCAK256 LOG2 SHL DUP9 CALLDATACOPY 0xD LOG0 SLT BLOCKHASH MSTORE PUSH23 0x3C2F5AF9286ED4BF3432158126871C64736F6C63430008 EQ STOP CALLER ",
          "sourceMap": "204:4901:23:-:0;;;1268:71;;;;;;;;;;1290:10;1297:1:0;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;1857:1:16;2061:7;:21;;;;1313:18:23::1;:16;;;:18;;:::i;:::-;204:4901:::0;;2912:187:0;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;1656:1408:23:-;1703:24;671:3;1730:26;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1703:53;;1771:9;1767:82;671:3;1786:1;:15;1767:82;;;1836:1;1823:7;1831:1;1823:10;;;;;;;;:::i;:::-;;;;;;;:14;;;;;1803:3;;;;;:::i;:::-;;;;1767:82;;;;1903:9;1929:1;671:3;1915:15;;;;:::i;:::-;1903:27;;1899:216;1936:1;1932;:5;1899:216;;;1959:9;2035:1;2031;:5;;;;:::i;:::-;2006:15;2023:1;1989:36;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1979:47;;;;;;1971:56;;:66;;;;:::i;:::-;1959:78;;2080:7;2088:1;2080:10;;;;;;;;:::i;:::-;;;;;;;;2092:7;2100:1;2092:10;;;;;;;;:::i;:::-;;;;;;;;2053:7;2061:1;2053:10;;;;;;;;:::i;:::-;;;;;;;2065:7;2073:1;2065:10;;;;;;;;:::i;:::-;;;;;;;2052:51;;;;;;;;;;1944:171;1939:3;;;;;:::i;:::-;;;;1899:216;;;;2152:20;2267:38;;;;;;;;2271:5;2267:38;;;;;;2278:19;2267:38;;;;;;;;:::i;:::-;;;;;;2299:5;2267:38;;;;;2234:5;:30;2240:7;2248:14;;;;;:::i;:::-;;;2240:23;;;;;;;;:::i;:::-;;;;;;;;2234:30;;;;;;;;;;;:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2369:9;2365:130;2388:1;2384;:5;2365:130;;;2444:39;;;;;;;;2448:5;2444:39;;;;;;2455:20;2444:39;;;;;;;;:::i;:::-;;;;;;2477:5;2444:39;;;;;2411:5;:30;2417:7;2425:14;;;;;:::i;:::-;;;2417:23;;;;;;;;:::i;:::-;;;;;;;;2411:30;;;;;;;;;;;:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2391:3;;;;;:::i;:::-;;;;2365:130;;;;2561:9;2557:130;2580:2;2576:1;:6;2557:130;;;2637:38;;;;;;;;2641:5;2637:38;;;;;;2648:19;2637:38;;;;;;;;:::i;:::-;;;;;;2669:5;2637:38;;;;;2604:5;:30;2610:7;2618:14;;;;;:::i;:::-;;;2610:23;;;;;;;;:::i;:::-;;;;;;;;2604:30;;;;;;;;;;;:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2584:3;;;;;:::i;:::-;;;;2557:130;;;;2743:9;2739:123;2762:1;2758;:5;2739:123;;;2818:32;;;;;;;;2822:5;2818:32;;;;;;2829:13;2818:32;;;;;;;;:::i;:::-;;;;;;2844:5;2818:32;;;;;2785:5;:30;2791:7;2799:14;;;;;:::i;:::-;;;2791:23;;;;;;;;:::i;:::-;;;;;;;;2785:30;;;;;;;;;;;:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2765:3;;;;;:::i;:::-;;;;2739:123;;;;2926:9;2938:12;2926:24;;2922:135;671:3;2952:1;:15;2922:135;;;3009:36;;;;;;;;3013:5;3009:36;;;;;;3020:17;3009:36;;;;;;;;:::i;:::-;;;;;;3039:5;3009:36;;;;;2989:5;:17;2995:7;3003:1;2995:10;;;;;;;;:::i;:::-;;;;;;;;2989:17;;;;;;;;;;;:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2969:3;;;;;:::i;:::-;;;;2922:135;;;;1692:1372;;1656:1408::o;7:126:25:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;593:180::-;641:77;638:1;631:88;738:4;735:1;728:15;762:4;759:1;752:15;779:180;827:77;824:1;817:88;924:4;921:1;914:15;948:4;945:1;938:15;965:180;1013:77;1010:1;1003:88;1110:4;1107:1;1100:15;1134:4;1131:1;1124:15;1151:77;1188:7;1217:5;1206:16;;1151:77;;;:::o;1234:233::-;1273:3;1296:24;1314:5;1296:24;:::i;:::-;1287:33;;1342:66;1335:5;1332:77;1329:103;;1412:18;;:::i;:::-;1329:103;1459:1;1452:5;1448:13;1441:20;;1234:233;;;:::o;1473:194::-;1513:4;1533:20;1551:1;1533:20;:::i;:::-;1528:25;;1567:20;1585:1;1567:20;:::i;:::-;1562:25;;1611:1;1608;1604:9;1596:17;;1635:1;1629:4;1626:11;1623:37;;;1640:18;;:::i;:::-;1623:37;1473:194;;;;:::o;1673:191::-;1713:3;1732:20;1750:1;1732:20;:::i;:::-;1727:25;;1766:20;1784:1;1766:20;:::i;:::-;1761:25;;1809:1;1806;1802:9;1795:16;;1830:3;1827:1;1824:10;1821:36;;;1837:18;;:::i;:::-;1821:36;1673:191;;;;:::o;1870:79::-;1909:7;1938:5;1927:16;;1870:79;;;:::o;1955:157::-;2060:45;2080:24;2098:5;2080:24;:::i;:::-;2060:45;:::i;:::-;2055:3;2048:58;1955:157;;:::o;2118:397::-;2258:3;2273:75;2344:3;2335:6;2273:75;:::i;:::-;2373:2;2368:3;2364:12;2357:19;;2386:75;2457:3;2448:6;2386:75;:::i;:::-;2486:2;2481:3;2477:12;2470:19;;2506:3;2499:10;;2118:397;;;;;:::o;2521:180::-;2569:77;2566:1;2559:88;2666:4;2663:1;2656:15;2690:4;2687:1;2680:15;2707:176;2739:1;2756:20;2774:1;2756:20;:::i;:::-;2751:25;;2790:20;2808:1;2790:20;:::i;:::-;2785:25;;2829:1;2819:35;;2834:18;;:::i;:::-;2819:35;2875:1;2872;2868:9;2863:14;;2707:176;;;;:::o;2889:171::-;2928:3;2951:24;2969:5;2951:24;:::i;:::-;2942:33;;2997:4;2990:5;2987:15;2984:41;;3005:18;;:::i;:::-;2984:41;3052:1;3045:5;3041:13;3034:20;;2889:171;;;:::o;3066:180::-;3114:77;3111:1;3104:88;3211:4;3208:1;3201:15;3235:4;3232:1;3225:15;204:4901:23;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@LARGE_PRIZE_7243": {
              "entryPoint": 3623,
              "id": 7243,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@MEDIUM_PRIZE_7240": {
              "entryPoint": 1992,
              "id": 7240,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@PRICE_PER_BOX_7234": {
              "entryPoint": 964,
              "id": 7234,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@SMALL_PRIZE_7237": {
              "entryPoint": 1943,
              "id": 7237,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@TOTAL_BOXES_7231": {
              "entryPoint": 871,
              "id": 7231,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_7766": {
              "entryPoint": null,
              "id": 7766,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_checkOwner_84": {
              "entryPoint": 3769,
              "id": 84,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_msgSender_2098": {
              "entryPoint": 4179,
              "id": 2098,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_nonReentrantAfter_2225": {
              "entryPoint": 4170,
              "id": 2225,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_nonReentrantBefore_2217": {
              "entryPoint": 4100,
              "id": 2217,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_transferOwnership_146": {
              "entryPoint": 3904,
              "id": 146,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@boxes_7248": {
              "entryPoint": 1126,
              "id": 7248,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@claimPrize_7716": {
              "entryPoint": 2004,
              "id": 7716,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@getBoxStatus_7743": {
              "entryPoint": 975,
              "id": 7743,
              "parameterSlots": 1,
              "returnSlots": 2
            },
            "@nftToken_7251": {
              "entryPoint": 1954,
              "id": 7251,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@openBox_7564": {
              "entryPoint": 1522,
              "id": 7564,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@owner_67": {
              "entryPoint": 1227,
              "id": 67,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@renounceOwnership_98": {
              "entryPoint": 1207,
              "id": 98,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@setNFTTokenContract_7312": {
              "entryPoint": 1268,
              "id": 7312,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@transferOwnership_126": {
              "entryPoint": 3635,
              "id": 126,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@withdraw_7762": {
              "entryPoint": 876,
              "id": 7762,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "abi_decode_t_address": {
              "entryPoint": 4690,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bool_fromMemory": {
              "entryPoint": 5715,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_uint256": {
              "entryPoint": 4267,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_uint256_fromMemory": {
              "entryPoint": 5889,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 4711,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 5736,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 4288,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 5910,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_address_to_t_address_fromStack": {
              "entryPoint": 4625,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_bool_to_t_bool_fromStack": {
              "entryPoint": 4345,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_contract$_NFTToken_$8123_to_t_address_fromStack": {
              "entryPoint": 4836,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_enum$_PrizeType_$7220_to_t_uint8_fromStack": {
              "entryPoint": 4505,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_stringliteral_06f5ff2466deba78c590d2753de3cf0f23d0c8890669c8f46c92c909491c5f65_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 5517,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_2153c8469d3caa242a6a99959e794d98deb2fb0f154c7334ba96995190752521_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 4936,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_32f70a4d60049bce96a032d4a9bed827ccebe1448958aca372f18b1ae24d13be_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 5152,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_498fbcbd5c55268958288146d1fb253426b9c1bd70bfbb9c8a6f1872d60729ef_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 5044,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_4a16c9573ca62f8c24cb5353727f0f2b66335e340927a39a34715148881a826d_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 5260,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_85b5485a591143c9527c2143197ea71ddba43dcf7ce97bb1b172e640a850da76_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 5625,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_b2df7dc38a7105b627f21959e9c0b9a396c09ca01cb6ef6f916ba94bebbe20d7_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 5822,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_f3d0d4901191a8ab0992e1f0bc7d833ec039e6c2b82da42175ba625b7d5b1955_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 5409,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_uint256_to_t_uint256_fromStack": {
              "entryPoint": 4197,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": 4640,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed": {
              "entryPoint": 4360,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool_t_enum$_PrizeType_$7220_t_bool__to_t_bool_t_uint8_t_bool__fromStack_reversed": {
              "entryPoint": 4520,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_NFTToken_$8123__to_t_address__fromStack_reversed": {
              "entryPoint": 4851,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_06f5ff2466deba78c590d2753de3cf0f23d0c8890669c8f46c92c909491c5f65__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5552,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_2153c8469d3caa242a6a99959e794d98deb2fb0f154c7334ba96995190752521__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 4971,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_32f70a4d60049bce96a032d4a9bed827ccebe1448958aca372f18b1ae24d13be__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5187,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_498fbcbd5c55268958288146d1fb253426b9c1bd70bfbb9c8a6f1872d60729ef__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5079,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_4a16c9573ca62f8c24cb5353727f0f2b66335e340927a39a34715148881a826d__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5295,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_85b5485a591143c9527c2143197ea71ddba43dcf7ce97bb1b172e640a850da76__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5660,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b2df7dc38a7105b627f21959e9c0b9a396c09ca01cb6ef6f916ba94bebbe20d7__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5857,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_f3d0d4901191a8ab0992e1f0bc7d833ec039e6c2b82da42175ba625b7d5b1955__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5444,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": 4212,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_enum$_PrizeType_$7220__to_t_uint256_t_uint8__fromStack_reversed": {
              "entryPoint": 5327,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "allocate_unbounded": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
              "entryPoint": 4878,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "cleanup_t_address": {
              "entryPoint": 4607,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_bool": {
              "entryPoint": 4333,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_enum$_PrizeType_$7220": {
              "entryPoint": 4468,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint160": {
              "entryPoint": 4575,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint256": {
              "entryPoint": 4187,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "convert_t_contract$_NFTToken_$8123_to_t_address": {
              "entryPoint": 4818,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "convert_t_enum$_PrizeType_$7220_to_t_uint8": {
              "entryPoint": 4487,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "convert_t_uint160_to_t_address": {
              "entryPoint": 4800,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "convert_t_uint160_to_t_uint160": {
              "entryPoint": 4766,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "identity": {
              "entryPoint": 4756,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x21": {
              "entryPoint": 4401,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
              "entryPoint": 4239,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "store_literal_in_memory_06f5ff2466deba78c590d2753de3cf0f23d0c8890669c8f46c92c909491c5f65": {
              "entryPoint": 5476,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_2153c8469d3caa242a6a99959e794d98deb2fb0f154c7334ba96995190752521": {
              "entryPoint": 4895,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_32f70a4d60049bce96a032d4a9bed827ccebe1448958aca372f18b1ae24d13be": {
              "entryPoint": 5111,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_498fbcbd5c55268958288146d1fb253426b9c1bd70bfbb9c8a6f1872d60729ef": {
              "entryPoint": 5003,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_4a16c9573ca62f8c24cb5353727f0f2b66335e340927a39a34715148881a826d": {
              "entryPoint": 5219,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_85b5485a591143c9527c2143197ea71ddba43dcf7ce97bb1b172e640a850da76": {
              "entryPoint": 5584,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_b2df7dc38a7105b627f21959e9c0b9a396c09ca01cb6ef6f916ba94bebbe20d7": {
              "entryPoint": 5781,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_f3d0d4901191a8ab0992e1f0bc7d833ec039e6c2b82da42175ba625b7d5b1955": {
              "entryPoint": 5368,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_assert_t_enum$_PrizeType_$7220": {
              "entryPoint": 4448,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_address": {
              "entryPoint": 4667,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_bool": {
              "entryPoint": 5692,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_uint256": {
              "entryPoint": 4244,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:14691:25",
                "statements": [
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "52:32:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "62:16:25",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "73:5:25"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "62:7:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "34:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "44:7:25",
                        "type": ""
                      }
                    ],
                    "src": "7:77:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "155:53:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "172:3:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "195:5:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "177:17:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "177:24:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "165:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "165:37:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "165:37:25"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "143:5:25",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "150:3:25",
                        "type": ""
                      }
                    ],
                    "src": "90:118:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "312:124:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "322:26:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "334:9:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "345:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "330:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "330:18:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "322:4:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "402:6:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "415:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "426:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "411:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "411:17:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "358:43:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "358:71:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "358:71:25"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "284:9:25",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "296:6:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "307:4:25",
                        "type": ""
                      }
                    ],
                    "src": "214:222:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "482:35:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "492:19:25",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "508:2:25",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "502:5:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "502:9:25"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "492:6:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "allocate_unbounded",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "475:6:25",
                        "type": ""
                      }
                    ],
                    "src": "442:75:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "612:28:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "629:1:25",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "632:1:25",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "622:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "622:12:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "622:12:25"
                        }
                      ]
                    },
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulFunctionDefinition",
                    "src": "523:117:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "735:28:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "752:1:25",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "755:1:25",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "745:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "745:12:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "745:12:25"
                        }
                      ]
                    },
                    "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                    "nodeType": "YulFunctionDefinition",
                    "src": "646:117:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "812:79:25",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "869:16:25",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "878:1:25",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "881:1:25",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "871:6:25"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "871:12:25"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "871:12:25"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "835:5:25"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "860:5:25"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint256",
                                      "nodeType": "YulIdentifier",
                                      "src": "842:17:25"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "842:24:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "832:2:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "832:35:25"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "825:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "825:43:25"
                          },
                          "nodeType": "YulIf",
                          "src": "822:63:25"
                        }
                      ]
                    },
                    "name": "validator_revert_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "805:5:25",
                        "type": ""
                      }
                    ],
                    "src": "769:122:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "949:87:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "959:29:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "981:6:25"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "968:12:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "968:20:25"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "959:5:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1024:5:25"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "997:26:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "997:33:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "997:33:25"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "927:6:25",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "935:3:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "943:5:25",
                        "type": ""
                      }
                    ],
                    "src": "897:139:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1108:263:25",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1154:83:25",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "1156:77:25"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1156:79:25"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1156:79:25"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1129:7:25"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1138:9:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1125:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1125:23:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1150:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1121:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1121:32:25"
                          },
                          "nodeType": "YulIf",
                          "src": "1118:119:25"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "1247:117:25",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1262:15:25",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1276:1:25",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "1266:6:25",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1291:63:25",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1326:9:25"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1337:6:25"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1322:3:25"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1322:22:25"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1346:7:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "1301:20:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1301:53:25"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1291:6:25"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1078:9:25",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1089:7:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1101:6:25",
                        "type": ""
                      }
                    ],
                    "src": "1042:329:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1419:48:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1429:32:25",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1454:5:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1447:6:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1447:13:25"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1440:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1440:21:25"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "1429:7:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1401:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "1411:7:25",
                        "type": ""
                      }
                    ],
                    "src": "1377:90:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1532:50:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "1549:3:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1569:5:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_bool",
                                  "nodeType": "YulIdentifier",
                                  "src": "1554:14:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1554:21:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1542:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1542:34:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1542:34:25"
                        }
                      ]
                    },
                    "name": "abi_encode_t_bool_to_t_bool_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1520:5:25",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "1527:3:25",
                        "type": ""
                      }
                    ],
                    "src": "1473:109:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1702:194:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1712:26:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1724:9:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1735:2:25",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1720:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1720:18:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1712:4:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1786:6:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1799:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1810:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1795:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1795:17:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bool_to_t_bool_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "1748:37:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1748:65:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1748:65:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "1861:6:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1874:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1885:2:25",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1870:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1870:18:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bool_to_t_bool_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "1823:37:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1823:66:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1823:66:25"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1666:9:25",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1678:6:25",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1686:6:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1697:4:25",
                        "type": ""
                      }
                    ],
                    "src": "1588:308:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1930:152:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1947:1:25",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1950:77:25",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1940:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1940:88:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1940:88:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2044:1:25",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2047:4:25",
                                "type": "",
                                "value": "0x21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2037:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2037:15:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2037:15:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2068:1:25",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2071:4:25",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "2061:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2061:15:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2061:15:25"
                        }
                      ]
                    },
                    "name": "panic_error_0x21",
                    "nodeType": "YulFunctionDefinition",
                    "src": "1902:180:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2145:62:25",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2179:22:25",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x21",
                                    "nodeType": "YulIdentifier",
                                    "src": "2181:16:25"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2181:18:25"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2181:18:25"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2168:5:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2175:1:25",
                                    "type": "",
                                    "value": "5"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2165:2:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2165:12:25"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2158:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2158:20:25"
                          },
                          "nodeType": "YulIf",
                          "src": "2155:46:25"
                        }
                      ]
                    },
                    "name": "validator_assert_t_enum$_PrizeType_$7220",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2138:5:25",
                        "type": ""
                      }
                    ],
                    "src": "2088:119:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2272:80:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2282:16:25",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2293:5:25"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "2282:7:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2340:5:25"
                              }
                            ],
                            "functionName": {
                              "name": "validator_assert_t_enum$_PrizeType_$7220",
                              "nodeType": "YulIdentifier",
                              "src": "2299:40:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2299:47:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2299:47:25"
                        }
                      ]
                    },
                    "name": "cleanup_t_enum$_PrizeType_$7220",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2254:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "2264:7:25",
                        "type": ""
                      }
                    ],
                    "src": "2213:139:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2430:67:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2440:51:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2485:5:25"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_enum$_PrizeType_$7220",
                              "nodeType": "YulIdentifier",
                              "src": "2453:31:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2453:38:25"
                          },
                          "variableNames": [
                            {
                              "name": "converted",
                              "nodeType": "YulIdentifier",
                              "src": "2440:9:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "convert_t_enum$_PrizeType_$7220_to_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2410:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "converted",
                        "nodeType": "YulTypedName",
                        "src": "2420:9:25",
                        "type": ""
                      }
                    ],
                    "src": "2358:139:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2580:78:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2597:3:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2645:5:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "convert_t_enum$_PrizeType_$7220_to_t_uint8",
                                  "nodeType": "YulIdentifier",
                                  "src": "2602:42:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2602:49:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2590:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2590:62:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2590:62:25"
                        }
                      ]
                    },
                    "name": "abi_encode_t_enum$_PrizeType_$7220_to_t_uint8_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2568:5:25",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2575:3:25",
                        "type": ""
                      }
                    ],
                    "src": "2503:155:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2818:288:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2828:26:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2840:9:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2851:2:25",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2836:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2836:18:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2828:4:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2902:6:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2915:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2926:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2911:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2911:17:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bool_to_t_bool_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "2864:37:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2864:65:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2864:65:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "2995:6:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3008:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3019:2:25",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3004:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3004:18:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_enum$_PrizeType_$7220_to_t_uint8_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "2939:55:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2939:84:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2939:84:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "3071:6:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3084:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3095:2:25",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3080:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3080:18:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bool_to_t_bool_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "3033:37:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3033:66:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3033:66:25"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool_t_enum$_PrizeType_$7220_t_bool__to_t_bool_t_uint8_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2774:9:25",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2786:6:25",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2794:6:25",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2802:6:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2813:4:25",
                        "type": ""
                      }
                    ],
                    "src": "2664:442:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3157:81:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3167:65:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3182:5:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3189:42:25",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3178:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3178:54:25"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "3167:7:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint160",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3139:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "3149:7:25",
                        "type": ""
                      }
                    ],
                    "src": "3112:126:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3289:51:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3299:35:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3328:5:25"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nodeType": "YulIdentifier",
                              "src": "3310:17:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3310:24:25"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "3299:7:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3271:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "3281:7:25",
                        "type": ""
                      }
                    ],
                    "src": "3244:96:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3411:53:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3428:3:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3451:5:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "3433:17:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3433:24:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3421:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3421:37:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3421:37:25"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3399:5:25",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "3406:3:25",
                        "type": ""
                      }
                    ],
                    "src": "3346:118:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3568:124:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3578:26:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3590:9:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3601:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3586:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3586:18:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3578:4:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3658:6:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3671:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3682:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3667:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3667:17:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "3614:43:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3614:71:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3614:71:25"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3540:9:25",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3552:6:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3563:4:25",
                        "type": ""
                      }
                    ],
                    "src": "3470:222:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3741:79:25",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3798:16:25",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3807:1:25",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3810:1:25",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3800:6:25"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3800:12:25"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3800:12:25"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3764:5:25"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "3789:5:25"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "3771:17:25"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3771:24:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "3761:2:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3761:35:25"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3754:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3754:43:25"
                          },
                          "nodeType": "YulIf",
                          "src": "3751:63:25"
                        }
                      ]
                    },
                    "name": "validator_revert_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3734:5:25",
                        "type": ""
                      }
                    ],
                    "src": "3698:122:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3878:87:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3888:29:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3910:6:25"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3897:12:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3897:20:25"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "3888:5:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3953:5:25"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "3926:26:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3926:33:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3926:33:25"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "3856:6:25",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3864:3:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3872:5:25",
                        "type": ""
                      }
                    ],
                    "src": "3826:139:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4037:263:25",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4083:83:25",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "4085:77:25"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4085:79:25"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4085:79:25"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4058:7:25"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4067:9:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4054:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4054:23:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4079:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4050:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4050:32:25"
                          },
                          "nodeType": "YulIf",
                          "src": "4047:119:25"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "4176:117:25",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4191:15:25",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4205:1:25",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4195:6:25",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4220:63:25",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4255:9:25"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "4266:6:25"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4251:3:25"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4251:22:25"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4275:7:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "4230:20:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4230:53:25"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "4220:6:25"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4007:9:25",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4018:7:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4030:6:25",
                        "type": ""
                      }
                    ],
                    "src": "3971:329:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4338:28:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4348:12:25",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4355:5:25"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "4348:3:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "identity",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4324:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "4334:3:25",
                        "type": ""
                      }
                    ],
                    "src": "4306:60:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4432:82:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4442:66:25",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4500:5:25"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint160",
                                      "nodeType": "YulIdentifier",
                                      "src": "4482:17:25"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4482:24:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "identity",
                                  "nodeType": "YulIdentifier",
                                  "src": "4473:8:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4473:34:25"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nodeType": "YulIdentifier",
                              "src": "4455:17:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4455:53:25"
                          },
                          "variableNames": [
                            {
                              "name": "converted",
                              "nodeType": "YulIdentifier",
                              "src": "4442:9:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "convert_t_uint160_to_t_uint160",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4412:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "converted",
                        "nodeType": "YulTypedName",
                        "src": "4422:9:25",
                        "type": ""
                      }
                    ],
                    "src": "4372:142:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4580:66:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4590:50:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4634:5:25"
                              }
                            ],
                            "functionName": {
                              "name": "convert_t_uint160_to_t_uint160",
                              "nodeType": "YulIdentifier",
                              "src": "4603:30:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4603:37:25"
                          },
                          "variableNames": [
                            {
                              "name": "converted",
                              "nodeType": "YulIdentifier",
                              "src": "4590:9:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "convert_t_uint160_to_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4560:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "converted",
                        "nodeType": "YulTypedName",
                        "src": "4570:9:25",
                        "type": ""
                      }
                    ],
                    "src": "4520:126:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4729:66:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4739:50:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4783:5:25"
                              }
                            ],
                            "functionName": {
                              "name": "convert_t_uint160_to_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "4752:30:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4752:37:25"
                          },
                          "variableNames": [
                            {
                              "name": "converted",
                              "nodeType": "YulIdentifier",
                              "src": "4739:9:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "convert_t_contract$_NFTToken_$8123_to_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4709:5:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "converted",
                        "nodeType": "YulTypedName",
                        "src": "4719:9:25",
                        "type": ""
                      }
                    ],
                    "src": "4652:143:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4883:83:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4900:3:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4953:5:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "convert_t_contract$_NFTToken_$8123_to_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "4905:47:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4905:54:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4893:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4893:67:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4893:67:25"
                        }
                      ]
                    },
                    "name": "abi_encode_t_contract$_NFTToken_$8123_to_t_address_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4871:5:25",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "4878:3:25",
                        "type": ""
                      }
                    ],
                    "src": "4801:165:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5087:141:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5097:26:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5109:9:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5120:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5105:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5105:18:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5097:4:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5194:6:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5207:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5218:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5203:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5203:17:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_contract$_NFTToken_$8123_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "5133:60:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5133:88:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5133:88:25"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_NFTToken_$8123__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5059:9:25",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5071:6:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5082:4:25",
                        "type": ""
                      }
                    ],
                    "src": "4972:256:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5330:73:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5347:3:25"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5352:6:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5340:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5340:19:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5340:19:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5368:29:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5387:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5392:4:25",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5383:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5383:14:25"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulIdentifier",
                              "src": "5368:11:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "5302:3:25",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "5307:6:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nodeType": "YulTypedName",
                        "src": "5318:11:25",
                        "type": ""
                      }
                    ],
                    "src": "5234:169:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5515:58:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "5537:6:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5545:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5533:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5533:14:25"
                              },
                              {
                                "hexValue": "496e76616c696420626f78204944",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5549:16:25",
                                "type": "",
                                "value": "Invalid box ID"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5526:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5526:40:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5526:40:25"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_2153c8469d3caa242a6a99959e794d98deb2fb0f154c7334ba96995190752521",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "5507:6:25",
                        "type": ""
                      }
                    ],
                    "src": "5409:164:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5725:220:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5735:74:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5801:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5806:2:25",
                                "type": "",
                                "value": "14"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "5742:58:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5742:67:25"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "5735:3:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5907:3:25"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_2153c8469d3caa242a6a99959e794d98deb2fb0f154c7334ba96995190752521",
                              "nodeType": "YulIdentifier",
                              "src": "5818:88:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5818:93:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5818:93:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5920:19:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5931:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5936:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5927:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5927:12:25"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "5920:3:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_2153c8469d3caa242a6a99959e794d98deb2fb0f154c7334ba96995190752521_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "5713:3:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "5721:3:25",
                        "type": ""
                      }
                    ],
                    "src": "5579:366:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6122:248:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6132:26:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6144:9:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6155:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6140:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6140:18:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6132:4:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6179:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6190:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6175:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6175:17:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "6198:4:25"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6204:9:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6194:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6194:20:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6168:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6168:47:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6168:47:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6224:139:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "6358:4:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_2153c8469d3caa242a6a99959e794d98deb2fb0f154c7334ba96995190752521_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "6232:124:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6232:131:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6224:4:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2153c8469d3caa242a6a99959e794d98deb2fb0f154c7334ba96995190752521__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6102:9:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6117:4:25",
                        "type": ""
                      }
                    ],
                    "src": "5951:419:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6482:69:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "6504:6:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6512:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6500:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6500:14:25"
                              },
                              {
                                "hexValue": "496e76616c6964204e465420746f6b656e2061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6516:27:25",
                                "type": "",
                                "value": "Invalid NFT token address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6493:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6493:51:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6493:51:25"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_498fbcbd5c55268958288146d1fb253426b9c1bd70bfbb9c8a6f1872d60729ef",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "6474:6:25",
                        "type": ""
                      }
                    ],
                    "src": "6376:175:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6703:220:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6713:74:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6779:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6784:2:25",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "6720:58:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6720:67:25"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "6713:3:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6885:3:25"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_498fbcbd5c55268958288146d1fb253426b9c1bd70bfbb9c8a6f1872d60729ef",
                              "nodeType": "YulIdentifier",
                              "src": "6796:88:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6796:93:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6796:93:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6898:19:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6909:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6914:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6905:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6905:12:25"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "6898:3:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_498fbcbd5c55268958288146d1fb253426b9c1bd70bfbb9c8a6f1872d60729ef_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "6691:3:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6699:3:25",
                        "type": ""
                      }
                    ],
                    "src": "6557:366:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7100:248:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7110:26:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7122:9:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7133:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7118:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7118:18:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7110:4:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7157:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7168:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7153:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7153:17:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "7176:4:25"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7182:9:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7172:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7172:20:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7146:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7146:47:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7146:47:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7202:139:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "7336:4:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_498fbcbd5c55268958288146d1fb253426b9c1bd70bfbb9c8a6f1872d60729ef_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "7210:124:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7210:131:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7202:4:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_498fbcbd5c55268958288146d1fb253426b9c1bd70bfbb9c8a6f1872d60729ef__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7080:9:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7095:4:25",
                        "type": ""
                      }
                    ],
                    "src": "6929:419:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7460:62:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "7482:6:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7490:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7478:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7478:14:25"
                              },
                              {
                                "hexValue": "426f7820616c7265616479206f70656e6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7494:20:25",
                                "type": "",
                                "value": "Box already opened"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7471:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7471:44:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7471:44:25"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_32f70a4d60049bce96a032d4a9bed827ccebe1448958aca372f18b1ae24d13be",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "7452:6:25",
                        "type": ""
                      }
                    ],
                    "src": "7354:168:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7674:220:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7684:74:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7750:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7755:2:25",
                                "type": "",
                                "value": "18"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "7691:58:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7691:67:25"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "7684:3:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7856:3:25"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_32f70a4d60049bce96a032d4a9bed827ccebe1448958aca372f18b1ae24d13be",
                              "nodeType": "YulIdentifier",
                              "src": "7767:88:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7767:93:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7767:93:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7869:19:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7880:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7885:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7876:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7876:12:25"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "7869:3:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_32f70a4d60049bce96a032d4a9bed827ccebe1448958aca372f18b1ae24d13be_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7662:3:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "7670:3:25",
                        "type": ""
                      }
                    ],
                    "src": "7528:366:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8071:248:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8081:26:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8093:9:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8104:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8089:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8089:18:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8081:4:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8128:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8139:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8124:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8124:17:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "8147:4:25"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8153:9:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8143:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8143:20:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8117:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8117:47:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8117:47:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8173:139:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "8307:4:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_32f70a4d60049bce96a032d4a9bed827ccebe1448958aca372f18b1ae24d13be_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "8181:124:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8181:131:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8173:4:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_32f70a4d60049bce96a032d4a9bed827ccebe1448958aca372f18b1ae24d13be__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8051:9:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8066:4:25",
                        "type": ""
                      }
                    ],
                    "src": "7900:419:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8431:68:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "8453:6:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8461:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8449:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8449:14:25"
                              },
                              {
                                "hexValue": "496e636f7272656374207061796d656e7420616d6f756e74",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8465:26:25",
                                "type": "",
                                "value": "Incorrect payment amount"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8442:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8442:50:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8442:50:25"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_4a16c9573ca62f8c24cb5353727f0f2b66335e340927a39a34715148881a826d",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "8423:6:25",
                        "type": ""
                      }
                    ],
                    "src": "8325:174:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8651:220:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8661:74:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8727:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8732:2:25",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "8668:58:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8668:67:25"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "8661:3:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8833:3:25"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_4a16c9573ca62f8c24cb5353727f0f2b66335e340927a39a34715148881a826d",
                              "nodeType": "YulIdentifier",
                              "src": "8744:88:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8744:93:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8744:93:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8846:19:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8857:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8862:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8853:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8853:12:25"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "8846:3:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_4a16c9573ca62f8c24cb5353727f0f2b66335e340927a39a34715148881a826d_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "8639:3:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "8647:3:25",
                        "type": ""
                      }
                    ],
                    "src": "8505:366:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9048:248:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9058:26:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9070:9:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9081:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9066:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9066:18:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9058:4:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9105:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9116:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9101:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9101:17:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "9124:4:25"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9130:9:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9120:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9120:20:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9094:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9094:47:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9094:47:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9150:139:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "9284:4:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_4a16c9573ca62f8c24cb5353727f0f2b66335e340927a39a34715148881a826d_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "9158:124:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9158:131:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9150:4:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_4a16c9573ca62f8c24cb5353727f0f2b66335e340927a39a34715148881a826d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9028:9:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9043:4:25",
                        "type": ""
                      }
                    ],
                    "src": "8877:419:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9440:218:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9450:26:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9462:9:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9473:2:25",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9458:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9458:18:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9450:4:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9530:6:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9543:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9554:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9539:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9539:17:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "9486:43:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9486:71:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9486:71:25"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "9623:6:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9636:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9647:2:25",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9632:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9632:18:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_enum$_PrizeType_$7220_to_t_uint8_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "9567:55:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9567:84:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9567:84:25"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_enum$_PrizeType_$7220__to_t_uint256_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9404:9:25",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9416:6:25",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9424:6:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9435:4:25",
                        "type": ""
                      }
                    ],
                    "src": "9302:356:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9770:62:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "9792:6:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9800:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9788:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9788:14:25"
                              },
                              {
                                "hexValue": "426f78206e6f74206f70656e656420796574",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9804:20:25",
                                "type": "",
                                "value": "Box not opened yet"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9781:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9781:44:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9781:44:25"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_f3d0d4901191a8ab0992e1f0bc7d833ec039e6c2b82da42175ba625b7d5b1955",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "9762:6:25",
                        "type": ""
                      }
                    ],
                    "src": "9664:168:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9984:220:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9994:74:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "10060:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10065:2:25",
                                "type": "",
                                "value": "18"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "10001:58:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10001:67:25"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "9994:3:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "10166:3:25"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_f3d0d4901191a8ab0992e1f0bc7d833ec039e6c2b82da42175ba625b7d5b1955",
                              "nodeType": "YulIdentifier",
                              "src": "10077:88:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10077:93:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10077:93:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10179:19:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "10190:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10195:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10186:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10186:12:25"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "10179:3:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_f3d0d4901191a8ab0992e1f0bc7d833ec039e6c2b82da42175ba625b7d5b1955_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "9972:3:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "9980:3:25",
                        "type": ""
                      }
                    ],
                    "src": "9838:366:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10381:248:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10391:26:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10403:9:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10414:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10399:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10399:18:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10391:4:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10438:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10449:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10434:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10434:17:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "10457:4:25"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10463:9:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10453:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10453:20:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10427:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10427:47:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10427:47:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10483:139:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "10617:4:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_f3d0d4901191a8ab0992e1f0bc7d833ec039e6c2b82da42175ba625b7d5b1955_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "10491:124:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10491:131:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10483:4:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f3d0d4901191a8ab0992e1f0bc7d833ec039e6c2b82da42175ba625b7d5b1955__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10361:9:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10376:4:25",
                        "type": ""
                      }
                    ],
                    "src": "10210:419:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10741:65:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "10763:6:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10771:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10759:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10759:14:25"
                              },
                              {
                                "hexValue": "5072697a6520616c726561647920636c61696d6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10775:23:25",
                                "type": "",
                                "value": "Prize already claimed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10752:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10752:47:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10752:47:25"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_06f5ff2466deba78c590d2753de3cf0f23d0c8890669c8f46c92c909491c5f65",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "10733:6:25",
                        "type": ""
                      }
                    ],
                    "src": "10635:171:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10958:220:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10968:74:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11034:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11039:2:25",
                                "type": "",
                                "value": "21"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "10975:58:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10975:67:25"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "10968:3:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11140:3:25"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_06f5ff2466deba78c590d2753de3cf0f23d0c8890669c8f46c92c909491c5f65",
                              "nodeType": "YulIdentifier",
                              "src": "11051:88:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11051:93:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11051:93:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11153:19:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11164:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11169:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11160:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11160:12:25"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "11153:3:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_06f5ff2466deba78c590d2753de3cf0f23d0c8890669c8f46c92c909491c5f65_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "10946:3:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "10954:3:25",
                        "type": ""
                      }
                    ],
                    "src": "10812:366:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11355:248:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11365:26:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11377:9:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11388:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11373:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11373:18:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11365:4:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11412:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11423:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11408:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11408:17:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "11431:4:25"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11437:9:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11427:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11427:20:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11401:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11401:47:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11401:47:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11457:139:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "11591:4:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_06f5ff2466deba78c590d2753de3cf0f23d0c8890669c8f46c92c909491c5f65_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "11465:124:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11465:131:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11457:4:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_06f5ff2466deba78c590d2753de3cf0f23d0c8890669c8f46c92c909491c5f65__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11335:9:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11350:4:25",
                        "type": ""
                      }
                    ],
                    "src": "11184:419:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11715:70:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "11737:6:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11745:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11733:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11733:14:25"
                              },
                              {
                                "hexValue": "4e465420746f6b656e20636f6e7472616374206e6f7420736574",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11749:28:25",
                                "type": "",
                                "value": "NFT token contract not set"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11726:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11726:52:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11726:52:25"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_85b5485a591143c9527c2143197ea71ddba43dcf7ce97bb1b172e640a850da76",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "11707:6:25",
                        "type": ""
                      }
                    ],
                    "src": "11609:176:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11937:220:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11947:74:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12013:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12018:2:25",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "11954:58:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11954:67:25"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "11947:3:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12119:3:25"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_85b5485a591143c9527c2143197ea71ddba43dcf7ce97bb1b172e640a850da76",
                              "nodeType": "YulIdentifier",
                              "src": "12030:88:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12030:93:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12030:93:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12132:19:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12143:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12148:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12139:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12139:12:25"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "12132:3:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_85b5485a591143c9527c2143197ea71ddba43dcf7ce97bb1b172e640a850da76_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "11925:3:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "11933:3:25",
                        "type": ""
                      }
                    ],
                    "src": "11791:366:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12334:248:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12344:26:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12356:9:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12367:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12352:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12352:18:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12344:4:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12391:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12402:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12387:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12387:17:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "12410:4:25"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12416:9:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12406:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12406:20:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12380:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12380:47:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12380:47:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12436:139:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "12570:4:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_85b5485a591143c9527c2143197ea71ddba43dcf7ce97bb1b172e640a850da76_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "12444:124:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12444:131:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12436:4:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_85b5485a591143c9527c2143197ea71ddba43dcf7ce97bb1b172e640a850da76__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12314:9:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12329:4:25",
                        "type": ""
                      }
                    ],
                    "src": "12163:419:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12628:76:25",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12682:16:25",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12691:1:25",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12694:1:25",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12684:6:25"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12684:12:25"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12684:12:25"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "12651:5:25"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "12673:5:25"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_bool",
                                      "nodeType": "YulIdentifier",
                                      "src": "12658:14:25"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12658:21:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "12648:2:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12648:32:25"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "12641:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12641:40:25"
                          },
                          "nodeType": "YulIf",
                          "src": "12638:60:25"
                        }
                      ]
                    },
                    "name": "validator_revert_t_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "12621:5:25",
                        "type": ""
                      }
                    ],
                    "src": "12588:116:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12770:77:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12780:22:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "12795:6:25"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "12789:5:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12789:13:25"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "12780:5:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "12835:5:25"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bool",
                              "nodeType": "YulIdentifier",
                              "src": "12811:23:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12811:30:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12811:30:25"
                        }
                      ]
                    },
                    "name": "abi_decode_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "12748:6:25",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "12756:3:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "12764:5:25",
                        "type": ""
                      }
                    ],
                    "src": "12710:137:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12927:271:25",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12973:83:25",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "12975:77:25"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12975:79:25"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12975:79:25"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12948:7:25"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12957:9:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12944:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12944:23:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12969:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "12940:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12940:32:25"
                          },
                          "nodeType": "YulIf",
                          "src": "12937:119:25"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "13066:125:25",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "13081:15:25",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13095:1:25",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "13085:6:25",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13110:71:25",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "13153:9:25"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "13164:6:25"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13149:3:25"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13149:22:25"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "13173:7:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bool_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "13120:28:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13120:61:25"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "13110:6:25"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12897:9:25",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "12908:7:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12920:6:25",
                        "type": ""
                      }
                    ],
                    "src": "12853:345:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13310:75:25",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "13332:6:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13340:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13328:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13328:14:25"
                              },
                              {
                                "hexValue": "436f6e7472616374206e6f7420617574686f72697a656420746f206d696e74",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13344:33:25",
                                "type": "",
                                "value": "Contract not authorized to mint"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13321:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13321:57:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13321:57:25"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_b2df7dc38a7105b627f21959e9c0b9a396c09ca01cb6ef6f916ba94bebbe20d7",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "13302:6:25",
                        "type": ""
                      }
                    ],
                    "src": "13204:181:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13537:220:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13547:74:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13613:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13618:2:25",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "13554:58:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13554:67:25"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "13547:3:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13719:3:25"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_b2df7dc38a7105b627f21959e9c0b9a396c09ca01cb6ef6f916ba94bebbe20d7",
                              "nodeType": "YulIdentifier",
                              "src": "13630:88:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13630:93:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13630:93:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13732:19:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13743:3:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13748:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13739:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13739:12:25"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "13732:3:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_b2df7dc38a7105b627f21959e9c0b9a396c09ca01cb6ef6f916ba94bebbe20d7_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "13525:3:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "13533:3:25",
                        "type": ""
                      }
                    ],
                    "src": "13391:366:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13934:248:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13944:26:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13956:9:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13967:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13952:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13952:18:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13944:4:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13991:9:25"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14002:1:25",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13987:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13987:17:25"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "14010:4:25"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14016:9:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "14006:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14006:20:25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13980:6:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13980:47:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13980:47:25"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14036:139:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "14170:4:25"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_b2df7dc38a7105b627f21959e9c0b9a396c09ca01cb6ef6f916ba94bebbe20d7_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "14044:124:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14044:131:25"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14036:4:25"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b2df7dc38a7105b627f21959e9c0b9a396c09ca01cb6ef6f916ba94bebbe20d7__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13914:9:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13929:4:25",
                        "type": ""
                      }
                    ],
                    "src": "13763:419:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14251:80:25",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14261:22:25",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "14276:6:25"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "14270:5:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14270:13:25"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "14261:5:25"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14319:5:25"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "14292:26:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14292:33:25"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14292:33:25"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "14229:6:25",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "14237:3:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "14245:5:25",
                        "type": ""
                      }
                    ],
                    "src": "14188:143:25"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14414:274:25",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14460:83:25",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "14462:77:25"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14462:79:25"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14462:79:25"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "14435:7:25"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14444:9:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "14431:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14431:23:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14456:2:25",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "14427:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14427:32:25"
                          },
                          "nodeType": "YulIf",
                          "src": "14424:119:25"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "14553:128:25",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "14568:15:25",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14582:1:25",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "14572:6:25",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "14597:74:25",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "14643:9:25"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "14654:6:25"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "14639:3:25"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14639:22:25"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "14663:7:25"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "14607:31:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14607:64:25"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "14597:6:25"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14384:9:25",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "14395:7:25",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14407:6:25",
                        "type": ""
                      }
                    ],
                    "src": "14337:351:25"
                  }
                ]
              },
              "contents": "{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function validator_assert_t_enum$_PrizeType_$7220(value) {\n        if iszero(lt(value, 5)) { panic_error_0x21() }\n    }\n\n    function cleanup_t_enum$_PrizeType_$7220(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_PrizeType_$7220(value)\n    }\n\n    function convert_t_enum$_PrizeType_$7220_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_PrizeType_$7220(value)\n    }\n\n    function abi_encode_t_enum$_PrizeType_$7220_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_enum$_PrizeType_$7220_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_bool_t_enum$_PrizeType_$7220_t_bool__to_t_bool_t_uint8_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_enum$_PrizeType_$7220_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_NFTToken_$8123_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_NFTToken_$8123_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_NFTToken_$8123_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_NFTToken_$8123__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_NFTToken_$8123_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_2153c8469d3caa242a6a99959e794d98deb2fb0f154c7334ba96995190752521(memPtr) {\n\n        mstore(add(memPtr, 0), \"Invalid box ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_2153c8469d3caa242a6a99959e794d98deb2fb0f154c7334ba96995190752521_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)\n        store_literal_in_memory_2153c8469d3caa242a6a99959e794d98deb2fb0f154c7334ba96995190752521(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2153c8469d3caa242a6a99959e794d98deb2fb0f154c7334ba96995190752521__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2153c8469d3caa242a6a99959e794d98deb2fb0f154c7334ba96995190752521_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_498fbcbd5c55268958288146d1fb253426b9c1bd70bfbb9c8a6f1872d60729ef(memPtr) {\n\n        mstore(add(memPtr, 0), \"Invalid NFT token address\")\n\n    }\n\n    function abi_encode_t_stringliteral_498fbcbd5c55268958288146d1fb253426b9c1bd70bfbb9c8a6f1872d60729ef_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_498fbcbd5c55268958288146d1fb253426b9c1bd70bfbb9c8a6f1872d60729ef(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_498fbcbd5c55268958288146d1fb253426b9c1bd70bfbb9c8a6f1872d60729ef__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_498fbcbd5c55268958288146d1fb253426b9c1bd70bfbb9c8a6f1872d60729ef_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_32f70a4d60049bce96a032d4a9bed827ccebe1448958aca372f18b1ae24d13be(memPtr) {\n\n        mstore(add(memPtr, 0), \"Box already opened\")\n\n    }\n\n    function abi_encode_t_stringliteral_32f70a4d60049bce96a032d4a9bed827ccebe1448958aca372f18b1ae24d13be_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 18)\n        store_literal_in_memory_32f70a4d60049bce96a032d4a9bed827ccebe1448958aca372f18b1ae24d13be(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_32f70a4d60049bce96a032d4a9bed827ccebe1448958aca372f18b1ae24d13be__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_32f70a4d60049bce96a032d4a9bed827ccebe1448958aca372f18b1ae24d13be_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4a16c9573ca62f8c24cb5353727f0f2b66335e340927a39a34715148881a826d(memPtr) {\n\n        mstore(add(memPtr, 0), \"Incorrect payment amount\")\n\n    }\n\n    function abi_encode_t_stringliteral_4a16c9573ca62f8c24cb5353727f0f2b66335e340927a39a34715148881a826d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_4a16c9573ca62f8c24cb5353727f0f2b66335e340927a39a34715148881a826d(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4a16c9573ca62f8c24cb5353727f0f2b66335e340927a39a34715148881a826d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4a16c9573ca62f8c24cb5353727f0f2b66335e340927a39a34715148881a826d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_enum$_PrizeType_$7220__to_t_uint256_t_uint8__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_enum$_PrizeType_$7220_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_f3d0d4901191a8ab0992e1f0bc7d833ec039e6c2b82da42175ba625b7d5b1955(memPtr) {\n\n        mstore(add(memPtr, 0), \"Box not opened yet\")\n\n    }\n\n    function abi_encode_t_stringliteral_f3d0d4901191a8ab0992e1f0bc7d833ec039e6c2b82da42175ba625b7d5b1955_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 18)\n        store_literal_in_memory_f3d0d4901191a8ab0992e1f0bc7d833ec039e6c2b82da42175ba625b7d5b1955(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f3d0d4901191a8ab0992e1f0bc7d833ec039e6c2b82da42175ba625b7d5b1955__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f3d0d4901191a8ab0992e1f0bc7d833ec039e6c2b82da42175ba625b7d5b1955_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_06f5ff2466deba78c590d2753de3cf0f23d0c8890669c8f46c92c909491c5f65(memPtr) {\n\n        mstore(add(memPtr, 0), \"Prize already claimed\")\n\n    }\n\n    function abi_encode_t_stringliteral_06f5ff2466deba78c590d2753de3cf0f23d0c8890669c8f46c92c909491c5f65_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)\n        store_literal_in_memory_06f5ff2466deba78c590d2753de3cf0f23d0c8890669c8f46c92c909491c5f65(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_06f5ff2466deba78c590d2753de3cf0f23d0c8890669c8f46c92c909491c5f65__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_06f5ff2466deba78c590d2753de3cf0f23d0c8890669c8f46c92c909491c5f65_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_85b5485a591143c9527c2143197ea71ddba43dcf7ce97bb1b172e640a850da76(memPtr) {\n\n        mstore(add(memPtr, 0), \"NFT token contract not set\")\n\n    }\n\n    function abi_encode_t_stringliteral_85b5485a591143c9527c2143197ea71ddba43dcf7ce97bb1b172e640a850da76_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 26)\n        store_literal_in_memory_85b5485a591143c9527c2143197ea71ddba43dcf7ce97bb1b172e640a850da76(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_85b5485a591143c9527c2143197ea71ddba43dcf7ce97bb1b172e640a850da76__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_85b5485a591143c9527c2143197ea71ddba43dcf7ce97bb1b172e640a850da76_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_b2df7dc38a7105b627f21959e9c0b9a396c09ca01cb6ef6f916ba94bebbe20d7(memPtr) {\n\n        mstore(add(memPtr, 0), \"Contract not authorized to mint\")\n\n    }\n\n    function abi_encode_t_stringliteral_b2df7dc38a7105b627f21959e9c0b9a396c09ca01cb6ef6f916ba94bebbe20d7_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_b2df7dc38a7105b627f21959e9c0b9a396c09ca01cb6ef6f916ba94bebbe20d7(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b2df7dc38a7105b627f21959e9c0b9a396c09ca01cb6ef6f916ba94bebbe20d7__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b2df7dc38a7105b627f21959e9c0b9a396c09ca01cb6ef6f916ba94bebbe20d7_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
              "id": 25,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "6080604052600436106100ec5760003560e01c8063a921bc5b1161008a578063d4b3c61711610059578063d4b3c617146102bf578063d7098154146102ea578063eb9780cc14610313578063f2fde38b1461033e576100f3565b8063a921bc5b14610224578063b1e5e2b71461024d578063b8b3b48d14610269578063d06fcba814610294576100f3565b80634dfa3444116100c65780634dfa3444146101655780634ed3faf2146101a3578063715018a6146101e25780638da5cb5b146101f9576100f3565b8063373692dc146100f85780633ccfd60b146101235780634af2b4401461013a576100f3565b366100f357005b600080fd5b34801561010457600080fd5b5061010d610367565b60405161011a9190611074565b60405180910390f35b34801561012f57600080fd5b5061013861036c565b005b34801561014657600080fd5b5061014f6103c4565b60405161015c9190611074565b60405180910390f35b34801561017157600080fd5b5061018c600480360381019061018791906110c0565b6103cf565b60405161019a929190611108565b60405180910390f35b3480156101af57600080fd5b506101ca60048036038101906101c591906110c0565b610466565b6040516101d9939291906111a8565b60405180910390f35b3480156101ee57600080fd5b506101f76104b7565b005b34801561020557600080fd5b5061020e6104cb565b60405161021b9190611220565b60405180910390f35b34801561023057600080fd5b5061024b60048036038101906102469190611267565b6104f4565b005b610267600480360381019061026291906110c0565b6105f2565b005b34801561027557600080fd5b5061027e610797565b60405161028b9190611074565b60405180910390f35b3480156102a057600080fd5b506102a96107a2565b6040516102b691906112f3565b60405180910390f35b3480156102cb57600080fd5b506102d46107c8565b6040516102e19190611074565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c91906110c0565b6107d4565b005b34801561031f57600080fd5b50610328610e27565b6040516103359190611074565b60405180910390f35b34801561034a57600080fd5b5061036560048036038101906103609190611267565b610e33565b005b606481565b610374610eb9565b61037c6104cb565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156103c1573d6000803e3d6000fd5b50565b66354a6ba7a1800081565b60008060648310610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040c9061136b565b60405180910390fd5b6002600084815260200190815260200160002060000160009054906101000a900460ff166002600085815260200190815260200160002060000160029054906101000a900460ff1691509150915091565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a900460ff16905083565b6104bf610eb9565b6104c96000610f40565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104fc610eb9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361056b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610562906113d7565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fc026bf37ffb9004f36e978cd2fbc05a6e6ba7cc21fb9f7ce3a3bdc8a01e225e460405160405180910390a250565b6105fa611004565b6064811061063d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106349061136b565b60405180910390fd5b6002600082815260200190815260200160002060000160009054906101000a900460ff16156106a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069890611443565b60405180910390fd5b66354a6ba7a1800034146106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e1906114af565b60405180910390fd5b60016002600083815260200190815260200160002060000160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f465d1db9798268665147c6840d57ac3aaedc3df105a473c524c00a37ffd9add4826002600085815260200190815260200160002060000160019054906101000a900460ff166040516107849291906114cf565b60405180910390a261079461104a565b50565b66071afd498d000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b67016345785d8a000081565b6107dc611004565b6064811061081f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108169061136b565b60405180910390fd5b6002600082815260200190815260200160002060000160009054906101000a900460ff16610882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087990611544565b60405180910390fd5b6002600082815260200190815260200160002060000160029054906101000a900460ff16156108e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dd906115b0565b60405180910390fd5b6004808111156108f9576108f8611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff16600481111561092f5761092e611131565b5b03610aa157600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036109c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bc9061161c565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aa271e1a306040518263ffffffff1660e01b8152600401610a209190611220565b602060405180830381865afa158015610a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a619190611668565b610aa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a97906116e1565b60405180910390fd5b5b60016002600083815260200190815260200160002060000160026101000a81548160ff02191690831515021790555060016004811115610ae457610ae3611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610b1a57610b19611131565b5b03610b72573373ffffffffffffffffffffffffffffffffffffffff166108fc66071afd498d00009081150290604051600060405180830381858888f19350505050158015610b6c573d6000803e3d6000fd5b50610da9565b60026004811115610b8657610b85611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610bbc57610bbb611131565b5b03610c15573373ffffffffffffffffffffffffffffffffffffffff166108fc67016345785d8a00009081150290604051600060405180830381858888f19350505050158015610c0f573d6000803e3d6000fd5b50610da8565b60036004811115610c2957610c28611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610c5f57610c5e611131565b5b03610cb8573373ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051600060405180830381858888f19350505050158015610cb2573d6000803e3d6000fd5b50610da7565b600480811115610ccb57610cca611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610d0157610d00611131565b5b03610da657600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340d097c3336040518263ffffffff1660e01b8152600401610d619190611220565b6020604051808303816000875af1158015610d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da49190611716565b505b5b5b5b3373ffffffffffffffffffffffffffffffffffffffff167f53e3c45643a014901c16ab423f86c7d01176630d62d4adef2c2396f539fc6567826002600085815260200190815260200160002060000160019054906101000a900460ff16604051610e149291906114cf565b60405180910390a2610e2461104a565b50565b670de0b6b3a764000081565b610e3b610eb9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ead5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610ea49190611220565b60405180910390fd5b610eb681610f40565b50565b610ec1611053565b73ffffffffffffffffffffffffffffffffffffffff16610edf6104cb565b73ffffffffffffffffffffffffffffffffffffffff1614610f3e57610f02611053565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610f359190611220565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600260015403611040576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b600033905090565b6000819050919050565b61106e8161105b565b82525050565b60006020820190506110896000830184611065565b92915050565b600080fd5b61109d8161105b565b81146110a857600080fd5b50565b6000813590506110ba81611094565b92915050565b6000602082840312156110d6576110d561108f565b5b60006110e4848285016110ab565b91505092915050565b60008115159050919050565b611102816110ed565b82525050565b600060408201905061111d60008301856110f9565b61112a60208301846110f9565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061117157611170611131565b5b50565b600081905061118282611160565b919050565b600061119282611174565b9050919050565b6111a281611187565b82525050565b60006060820190506111bd60008301866110f9565b6111ca6020830185611199565b6111d760408301846110f9565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061120a826111df565b9050919050565b61121a816111ff565b82525050565b60006020820190506112356000830184611211565b92915050565b611244816111ff565b811461124f57600080fd5b50565b6000813590506112618161123b565b92915050565b60006020828403121561127d5761127c61108f565b5b600061128b84828501611252565b91505092915050565b6000819050919050565b60006112b96112b46112af846111df565b611294565b6111df565b9050919050565b60006112cb8261129e565b9050919050565b60006112dd826112c0565b9050919050565b6112ed816112d2565b82525050565b600060208201905061130860008301846112e4565b92915050565b600082825260208201905092915050565b7f496e76616c696420626f78204944000000000000000000000000000000000000600082015250565b6000611355600e8361130e565b91506113608261131f565b602082019050919050565b6000602082019050818103600083015261138481611348565b9050919050565b7f496e76616c6964204e465420746f6b656e206164647265737300000000000000600082015250565b60006113c160198361130e565b91506113cc8261138b565b602082019050919050565b600060208201905081810360008301526113f0816113b4565b9050919050565b7f426f7820616c7265616479206f70656e65640000000000000000000000000000600082015250565b600061142d60128361130e565b9150611438826113f7565b602082019050919050565b6000602082019050818103600083015261145c81611420565b9050919050565b7f496e636f7272656374207061796d656e7420616d6f756e740000000000000000600082015250565b600061149960188361130e565b91506114a482611463565b602082019050919050565b600060208201905081810360008301526114c88161148c565b9050919050565b60006040820190506114e46000830185611065565b6114f16020830184611199565b9392505050565b7f426f78206e6f74206f70656e6564207965740000000000000000000000000000600082015250565b600061152e60128361130e565b9150611539826114f8565b602082019050919050565b6000602082019050818103600083015261155d81611521565b9050919050565b7f5072697a6520616c726561647920636c61696d65640000000000000000000000600082015250565b600061159a60158361130e565b91506115a582611564565b602082019050919050565b600060208201905081810360008301526115c98161158d565b9050919050565b7f4e465420746f6b656e20636f6e7472616374206e6f7420736574000000000000600082015250565b6000611606601a8361130e565b9150611611826115d0565b602082019050919050565b60006020820190508181036000830152611635816115f9565b9050919050565b611645816110ed565b811461165057600080fd5b50565b6000815190506116628161163c565b92915050565b60006020828403121561167e5761167d61108f565b5b600061168c84828501611653565b91505092915050565b7f436f6e7472616374206e6f7420617574686f72697a656420746f206d696e7400600082015250565b60006116cb601f8361130e565b91506116d682611695565b602082019050919050565b600060208201905081810360008301526116fa816116be565b9050919050565b60008151905061171081611094565b92915050565b60006020828403121561172c5761172b61108f565b5b600061173a84828501611701565b9150509291505056fea264697066735822122028a180e5fbb420a21b88370da0124052763c2f5af9286ed4bf3432158126871c64736f6c63430008140033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA921BC5B GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xD4B3C617 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xD4B3C617 EQ PUSH2 0x2BF JUMPI DUP1 PUSH4 0xD7098154 EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0xEB9780CC EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x33E JUMPI PUSH2 0xF3 JUMP JUMPDEST DUP1 PUSH4 0xA921BC5B EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB1E5E2B7 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0xB8B3B48D EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0xD06FCBA8 EQ PUSH2 0x294 JUMPI PUSH2 0xF3 JUMP JUMPDEST DUP1 PUSH4 0x4DFA3444 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x4DFA3444 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x4ED3FAF2 EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1F9 JUMPI PUSH2 0xF3 JUMP JUMPDEST DUP1 PUSH4 0x373692DC EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x4AF2B440 EQ PUSH2 0x13A JUMPI PUSH2 0xF3 JUMP JUMPDEST CALLDATASIZE PUSH2 0xF3 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x367 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x1074 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x36C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x3C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x1074 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x187 SWAP2 SWAP1 PUSH2 0x10C0 JUMP JUMPDEST PUSH2 0x3CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19A SWAP3 SWAP2 SWAP1 PUSH2 0x1108 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C5 SWAP2 SWAP1 PUSH2 0x10C0 JUMP JUMPDEST PUSH2 0x466 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x4B7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x205 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH2 0x4CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1220 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x246 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH2 0x4F4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x267 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x262 SWAP2 SWAP1 PUSH2 0x10C0 JUMP JUMPDEST PUSH2 0x5F2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0x797 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x1074 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A9 PUSH2 0x7A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B6 SWAP2 SWAP1 PUSH2 0x12F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E1 SWAP2 SWAP1 PUSH2 0x1074 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x311 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x30C SWAP2 SWAP1 PUSH2 0x10C0 JUMP JUMPDEST PUSH2 0x7D4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x328 PUSH2 0xE27 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x335 SWAP2 SWAP1 PUSH2 0x1074 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x365 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x360 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH2 0xE33 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x64 DUP2 JUMP JUMPDEST PUSH2 0x374 PUSH2 0xEB9 JUMP JUMPDEST PUSH2 0x37C PUSH2 0x4CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x3C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH7 0x354A6BA7A18000 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x64 DUP4 LT PUSH2 0x415 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x136B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP4 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0xEB9 JUMP JUMPDEST PUSH2 0x4C9 PUSH1 0x0 PUSH2 0xF40 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x4FC PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x56B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x562 SWAP1 PUSH2 0x13D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC026BF37FFB9004F36E978CD2FBC05A6E6BA7CC21FB9F7CE3A3BDC8A01E225E4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x5FA PUSH2 0x1004 JUMP JUMPDEST PUSH1 0x64 DUP2 LT PUSH2 0x63D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x634 SWAP1 PUSH2 0x136B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x6A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x698 SWAP1 PUSH2 0x1443 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH7 0x354A6BA7A18000 CALLVALUE EQ PUSH2 0x6EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E1 SWAP1 PUSH2 0x14AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x465D1DB9798268665147C6840D57AC3AAEDC3DF105A473C524C00A37FFD9ADD4 DUP3 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x40 MLOAD PUSH2 0x784 SWAP3 SWAP2 SWAP1 PUSH2 0x14CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x794 PUSH2 0x104A JUMP JUMPDEST POP JUMP JUMPDEST PUSH7 0x71AFD498D0000 DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH8 0x16345785D8A0000 DUP2 JUMP JUMPDEST PUSH2 0x7DC PUSH2 0x1004 JUMP JUMPDEST PUSH1 0x64 DUP2 LT PUSH2 0x81F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x816 SWAP1 PUSH2 0x136B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x882 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x879 SWAP1 PUSH2 0x1544 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DD SWAP1 PUSH2 0x15B0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP1 DUP2 GT ISZERO PUSH2 0x8F9 JUMPI PUSH2 0x8F8 PUSH2 0x1131 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x92F JUMPI PUSH2 0x92E PUSH2 0x1131 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xAA1 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9BC SWAP1 PUSH2 0x161C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAA271E1A ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA20 SWAP2 SWAP1 PUSH2 0x1220 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA3D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA61 SWAP2 SWAP1 PUSH2 0x1668 JUMP JUMPDEST PUSH2 0xAA0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA97 SWAP1 PUSH2 0x16E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xAE4 JUMPI PUSH2 0xAE3 PUSH2 0x1131 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB1A JUMPI PUSH2 0xB19 PUSH2 0x1131 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xB72 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH7 0x71AFD498D0000 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xB6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xDA9 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB86 JUMPI PUSH2 0xB85 PUSH2 0x1131 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xBBC JUMPI PUSH2 0xBBB PUSH2 0x1131 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xC15 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH8 0x16345785D8A0000 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xC0F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xDA8 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xC29 JUMPI PUSH2 0xC28 PUSH2 0x1131 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xC5F JUMPI PUSH2 0xC5E PUSH2 0x1131 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xCB8 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH8 0xDE0B6B3A7640000 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xCB2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xDA7 JUMP JUMPDEST PUSH1 0x4 DUP1 DUP2 GT ISZERO PUSH2 0xCCB JUMPI PUSH2 0xCCA PUSH2 0x1131 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xD01 JUMPI PUSH2 0xD00 PUSH2 0x1131 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xDA6 JUMPI PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x40D097C3 CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD61 SWAP2 SWAP1 PUSH2 0x1220 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD80 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDA4 SWAP2 SWAP1 PUSH2 0x1716 JUMP JUMPDEST POP JUMPDEST JUMPDEST JUMPDEST JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x53E3C45643A014901C16AB423F86C7D01176630D62D4ADEF2C2396F539FC6567 DUP3 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x40 MLOAD PUSH2 0xE14 SWAP3 SWAP2 SWAP1 PUSH2 0x14CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0xE24 PUSH2 0x104A JUMP JUMPDEST POP JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST PUSH2 0xE3B PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEAD JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEA4 SWAP2 SWAP1 PUSH2 0x1220 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB6 DUP2 PUSH2 0xF40 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xEC1 PUSH2 0x1053 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xEDF PUSH2 0x4CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xF3E JUMPI PUSH2 0xF02 PUSH2 0x1053 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF35 SWAP2 SWAP1 PUSH2 0x1220 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0x1040 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x106E DUP2 PUSH2 0x105B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1089 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1065 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x109D DUP2 PUSH2 0x105B JUMP JUMPDEST DUP2 EQ PUSH2 0x10A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x10BA DUP2 PUSH2 0x1094 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10D6 JUMPI PUSH2 0x10D5 PUSH2 0x108F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10E4 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1102 DUP2 PUSH2 0x10ED JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x111D PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x10F9 JUMP JUMPDEST PUSH2 0x112A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x10F9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0x1171 JUMPI PUSH2 0x1170 PUSH2 0x1131 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x1182 DUP3 PUSH2 0x1160 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1192 DUP3 PUSH2 0x1174 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11A2 DUP2 PUSH2 0x1187 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x11BD PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x10F9 JUMP JUMPDEST PUSH2 0x11CA PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1199 JUMP JUMPDEST PUSH2 0x11D7 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x10F9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120A DUP3 PUSH2 0x11DF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x121A DUP2 PUSH2 0x11FF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1235 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1211 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1244 DUP2 PUSH2 0x11FF JUMP JUMPDEST DUP2 EQ PUSH2 0x124F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1261 DUP2 PUSH2 0x123B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x127D JUMPI PUSH2 0x127C PUSH2 0x108F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x128B DUP5 DUP3 DUP6 ADD PUSH2 0x1252 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12B9 PUSH2 0x12B4 PUSH2 0x12AF DUP5 PUSH2 0x11DF JUMP JUMPDEST PUSH2 0x1294 JUMP JUMPDEST PUSH2 0x11DF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12CB DUP3 PUSH2 0x129E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12DD DUP3 PUSH2 0x12C0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12ED DUP2 PUSH2 0x12D2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1308 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x12E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E76616C696420626F78204944000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1355 PUSH1 0xE DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x1360 DUP3 PUSH2 0x131F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1384 DUP2 PUSH2 0x1348 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C6964204E465420746F6B656E206164647265737300000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13C1 PUSH1 0x19 DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x13CC DUP3 PUSH2 0x138B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x13F0 DUP2 PUSH2 0x13B4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x426F7820616C7265616479206F70656E65640000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x142D PUSH1 0x12 DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x1438 DUP3 PUSH2 0x13F7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x145C DUP2 PUSH2 0x1420 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E636F7272656374207061796D656E7420616D6F756E740000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1499 PUSH1 0x18 DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x14A4 DUP3 PUSH2 0x1463 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14C8 DUP2 PUSH2 0x148C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x14E4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1065 JUMP JUMPDEST PUSH2 0x14F1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1199 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x426F78206E6F74206F70656E6564207965740000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x152E PUSH1 0x12 DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x1539 DUP3 PUSH2 0x14F8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x155D DUP2 PUSH2 0x1521 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5072697A6520616C726561647920636C61696D65640000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x159A PUSH1 0x15 DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x15A5 DUP3 PUSH2 0x1564 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x15C9 DUP2 PUSH2 0x158D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E465420746F6B656E20636F6E7472616374206E6F7420736574000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1606 PUSH1 0x1A DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x1611 DUP3 PUSH2 0x15D0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1635 DUP2 PUSH2 0x15F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1645 DUP2 PUSH2 0x10ED JUMP JUMPDEST DUP2 EQ PUSH2 0x1650 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1662 DUP2 PUSH2 0x163C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x167E JUMPI PUSH2 0x167D PUSH2 0x108F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x168C DUP5 DUP3 DUP6 ADD PUSH2 0x1653 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x436F6E7472616374206E6F7420617574686F72697A656420746F206D696E7400 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16CB PUSH1 0x1F DUP4 PUSH2 0x130E JUMP JUMPDEST SWAP2 POP PUSH2 0x16D6 DUP3 PUSH2 0x1695 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x16FA DUP2 PUSH2 0x16BE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1710 DUP2 PUSH2 0x1094 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x172C JUMPI PUSH2 0x172B PUSH2 0x108F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x173A DUP5 DUP3 DUP6 ADD PUSH2 0x1701 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 LOG1 DUP1 0xE5 0xFB 0xB4 KECCAK256 LOG2 SHL DUP9 CALLDATACOPY 0xD LOG0 SLT BLOCKHASH MSTORE PUSH23 0x3C2F5AF9286ED4BF3432158126871C64736F6C63430008 EQ STOP CALLER ",
          "sourceMap": "204:4901:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;633:41;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4923:106;;;;;;;;;;;;;:::i;:::-;;681:51;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4666:213;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;908:36;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;2293:101:0;;;;;;;;;;;;;:::i;:::-;;1638:85;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1384:234:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3093:380;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;739:49;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;981:24;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;795:48;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3502:1129;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;850:45;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;633:41:23;671:3;633:41;:::o;4923:106::-;1531:13:0;:11;:13::i;:::-;4981:7:23::1;:5;:7::i;:::-;4973:25;;:48;4999:21;4973:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;4923:106::o:0;681:51::-;721:11;681:51;:::o;4666:213::-;4726:11;4739:12;671:3;4772:5;:19;4764:46;;;;;;;;;;;;:::i;:::-;;;;;;;;;4829:5;:12;4835:5;4829:12;;;;;;;;;;;:19;;;;;;;;;;;;4850:5;:12;4856:5;4850:12;;;;;;;;;;;:20;;;;;;;;;;;;4821:50;;;;4666:213;;;:::o;908:36::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1638:85::-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;1384:234:23:-;1531:13:0;:11;:13::i;:::-;1491:1:23::1;1470:23;;:9;:23;;::::0;1462:61:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;1554:9;1534:8;;:30;;;;;;;;;;;;;;;;;;1600:9;1580:30;;;;;;;;;;;;1384:234:::0;:::o;3093:380::-;2500:21:16;:19;:21::i;:::-;671:3:23::1;3174:5;:19;3166:46;;;;;;;;;;;;:::i;:::-;;;;;;;;;3232:5;:12;3238:5;3232:12;;;;;;;;;;;:19;;;;;;;;;;;;3231:20;3223:51;;;;;;;;;;;;:::i;:::-;;;;;;;;;721:11;3293:9;:26;3285:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;3383:4;3361:5;:12;3367:5;3361:12;;;;;;;;;;;:19;;;:26;;;;;;;;;;;;;;;;;;3423:10;3413:52;;;3435:5;3442;:12;3448:5;3442:12;;;;;;;;;;;:22;;;;;;;;;;;;3413:52;;;;;;;:::i;:::-;;;;;;;;2542:20:16::0;:18;:20::i;:::-;3093:380:23;:::o;739:49::-;777:11;739:49;:::o;981:24::-;;;;;;;;;;;;;:::o;795:48::-;834:9;795:48;:::o;3502:1129::-;2500:21:16;:19;:21::i;:::-;671:3:23::1;3578:5;:19;3570:46;;;;;;;;;;;;:::i;:::-;;;;;;;;;3635:5;:12;3641:5;3635:12;;;;;;;;;;;:19;;;;;;;;;;;;3627:50;;;;;;;;;;;;:::i;:::-;;;;;;;;;3697:5;:12;3703:5;3697:12;;;;;;;;;;;:20;;;;;;;;;;;;3696:21;3688:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;3794:13;3768:39:::0;::::1;;;;;;;:::i;:::-;;:5;:12;3774:5;3768:12;;;;;;;;;;;:22;;;;;;;;;;;;:39;;;;;;;;:::i;:::-;;::::0;3764:233:::1;;3861:1;3832:31;;3840:8;;;;;;;;;;;3832:31;;::::0;3824:70:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;3917:8;;;;;;;;;;;:17;;;3943:4;3917:32;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3909:76;;;;;;;;;;;;:::i;:::-;;;;;;;;;3764:233;4040:4;4017:5;:12;4023:5;4017:12;;;;;;;;;;;:20;;;:27;;;;;;;;;;;;;;;;;;4095:19;4069:45;;;;;;;;:::i;:::-;;:5;:12;4075:5;4069:12;;;;;;;;;;;:22;;;;;;;;;;;;:45;;;;;;;;:::i;:::-;;::::0;4065:478:::1;;4139:10;4131:28;;:41;777:11;4131:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;4065:478;;;4220:20;4194:46;;;;;;;;:::i;:::-;;:5;:12;4200:5;4194:12;;;;;;;;;;;:22;;;;;;;;;;;;:46;;;;;;;;:::i;:::-;;::::0;4190:353:::1;;4265:10;4257:28;;:42;834:9;4257:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;4190:353;;;4347:19;4321:45;;;;;;;;:::i;:::-;;:5;:12;4327:5;4321:12;;;;;;;;;;;:22;;;;;;;;;;;;:45;;;;;;;;:::i;:::-;;::::0;4317:226:::1;;4391:10;4383:28;;:41;888:7;4383:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;4317:226;;;4472:13;4446:39:::0;::::1;;;;;;;:::i;:::-;;:5;:12;4452:5;4446:12;;;;;;;;;;;:22;;;;;;;;;;;;:39;;;;;;;;:::i;:::-;;::::0;4442:101:::1;;4502:8;;;;;;;;;;;:17;;;4520:10;4502:29;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4442:101;4317:226;4190:353;4065:478;4581:10;4568:55;;;4593:5;4600;:12;4606:5;4600:12;;;;;;;;;;;:22;;;;;;;;;;;;4568:55;;;;;;;:::i;:::-;;;;;;;;2542:20:16::0;:18;:20::i;:::-;3502:1129:23;:::o;850:45::-;888:7;850:45;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1796:162::-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;2912:187::-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;2575:307:16:-;1899:1;2702:7;;:18;2698:86;;2743:30;;;;;;;;;;;;;;2698:86;1899:1;2858:7;:17;;;;2575:307::o;2888:208::-;1857:1;3068:7;:21;;;;2888:208::o;656:96:14:-;709:7;735:10;728:17;;656:96;:::o;7:77:25:-;44:7;73:5;62:16;;7:77;;;:::o;90:118::-;177:24;195:5;177:24;:::i;:::-;172:3;165:37;90:118;;:::o;214:222::-;307:4;345:2;334:9;330:18;322:26;;358:71;426:1;415:9;411:17;402:6;358:71;:::i;:::-;214:222;;;;:::o;523:117::-;632:1;629;622:12;769:122;842:24;860:5;842:24;:::i;:::-;835:5;832:35;822:63;;881:1;878;871:12;822:63;769:122;:::o;897:139::-;943:5;981:6;968:20;959:29;;997:33;1024:5;997:33;:::i;:::-;897:139;;;;:::o;1042:329::-;1101:6;1150:2;1138:9;1129:7;1125:23;1121:32;1118:119;;;1156:79;;:::i;:::-;1118:119;1276:1;1301:53;1346:7;1337:6;1326:9;1322:22;1301:53;:::i;:::-;1291:63;;1247:117;1042:329;;;;:::o;1377:90::-;1411:7;1454:5;1447:13;1440:21;1429:32;;1377:90;;;:::o;1473:109::-;1554:21;1569:5;1554:21;:::i;:::-;1549:3;1542:34;1473:109;;:::o;1588:308::-;1697:4;1735:2;1724:9;1720:18;1712:26;;1748:65;1810:1;1799:9;1795:17;1786:6;1748:65;:::i;:::-;1823:66;1885:2;1874:9;1870:18;1861:6;1823:66;:::i;:::-;1588:308;;;;;:::o;1902:180::-;1950:77;1947:1;1940:88;2047:4;2044:1;2037:15;2071:4;2068:1;2061:15;2088:119;2175:1;2168:5;2165:12;2155:46;;2181:18;;:::i;:::-;2155:46;2088:119;:::o;2213:139::-;2264:7;2293:5;2282:16;;2299:47;2340:5;2299:47;:::i;:::-;2213:139;;;:::o;2358:::-;2420:9;2453:38;2485:5;2453:38;:::i;:::-;2440:51;;2358:139;;;:::o;2503:155::-;2602:49;2645:5;2602:49;:::i;:::-;2597:3;2590:62;2503:155;;:::o;2664:442::-;2813:4;2851:2;2840:9;2836:18;2828:26;;2864:65;2926:1;2915:9;2911:17;2902:6;2864:65;:::i;:::-;2939:84;3019:2;3008:9;3004:18;2995:6;2939:84;:::i;:::-;3033:66;3095:2;3084:9;3080:18;3071:6;3033:66;:::i;:::-;2664:442;;;;;;:::o;3112:126::-;3149:7;3189:42;3182:5;3178:54;3167:65;;3112:126;;;:::o;3244:96::-;3281:7;3310:24;3328:5;3310:24;:::i;:::-;3299:35;;3244:96;;;:::o;3346:118::-;3433:24;3451:5;3433:24;:::i;:::-;3428:3;3421:37;3346:118;;:::o;3470:222::-;3563:4;3601:2;3590:9;3586:18;3578:26;;3614:71;3682:1;3671:9;3667:17;3658:6;3614:71;:::i;:::-;3470:222;;;;:::o;3698:122::-;3771:24;3789:5;3771:24;:::i;:::-;3764:5;3761:35;3751:63;;3810:1;3807;3800:12;3751:63;3698:122;:::o;3826:139::-;3872:5;3910:6;3897:20;3888:29;;3926:33;3953:5;3926:33;:::i;:::-;3826:139;;;;:::o;3971:329::-;4030:6;4079:2;4067:9;4058:7;4054:23;4050:32;4047:119;;;4085:79;;:::i;:::-;4047:119;4205:1;4230:53;4275:7;4266:6;4255:9;4251:22;4230:53;:::i;:::-;4220:63;;4176:117;3971:329;;;;:::o;4306:60::-;4334:3;4355:5;4348:12;;4306:60;;;:::o;4372:142::-;4422:9;4455:53;4473:34;4482:24;4500:5;4482:24;:::i;:::-;4473:34;:::i;:::-;4455:53;:::i;:::-;4442:66;;4372:142;;;:::o;4520:126::-;4570:9;4603:37;4634:5;4603:37;:::i;:::-;4590:50;;4520:126;;;:::o;4652:143::-;4719:9;4752:37;4783:5;4752:37;:::i;:::-;4739:50;;4652:143;;;:::o;4801:165::-;4905:54;4953:5;4905:54;:::i;:::-;4900:3;4893:67;4801:165;;:::o;4972:256::-;5082:4;5120:2;5109:9;5105:18;5097:26;;5133:88;5218:1;5207:9;5203:17;5194:6;5133:88;:::i;:::-;4972:256;;;;:::o;5234:169::-;5318:11;5352:6;5347:3;5340:19;5392:4;5387:3;5383:14;5368:29;;5234:169;;;;:::o;5409:164::-;5549:16;5545:1;5537:6;5533:14;5526:40;5409:164;:::o;5579:366::-;5721:3;5742:67;5806:2;5801:3;5742:67;:::i;:::-;5735:74;;5818:93;5907:3;5818:93;:::i;:::-;5936:2;5931:3;5927:12;5920:19;;5579:366;;;:::o;5951:419::-;6117:4;6155:2;6144:9;6140:18;6132:26;;6204:9;6198:4;6194:20;6190:1;6179:9;6175:17;6168:47;6232:131;6358:4;6232:131;:::i;:::-;6224:139;;5951:419;;;:::o;6376:175::-;6516:27;6512:1;6504:6;6500:14;6493:51;6376:175;:::o;6557:366::-;6699:3;6720:67;6784:2;6779:3;6720:67;:::i;:::-;6713:74;;6796:93;6885:3;6796:93;:::i;:::-;6914:2;6909:3;6905:12;6898:19;;6557:366;;;:::o;6929:419::-;7095:4;7133:2;7122:9;7118:18;7110:26;;7182:9;7176:4;7172:20;7168:1;7157:9;7153:17;7146:47;7210:131;7336:4;7210:131;:::i;:::-;7202:139;;6929:419;;;:::o;7354:168::-;7494:20;7490:1;7482:6;7478:14;7471:44;7354:168;:::o;7528:366::-;7670:3;7691:67;7755:2;7750:3;7691:67;:::i;:::-;7684:74;;7767:93;7856:3;7767:93;:::i;:::-;7885:2;7880:3;7876:12;7869:19;;7528:366;;;:::o;7900:419::-;8066:4;8104:2;8093:9;8089:18;8081:26;;8153:9;8147:4;8143:20;8139:1;8128:9;8124:17;8117:47;8181:131;8307:4;8181:131;:::i;:::-;8173:139;;7900:419;;;:::o;8325:174::-;8465:26;8461:1;8453:6;8449:14;8442:50;8325:174;:::o;8505:366::-;8647:3;8668:67;8732:2;8727:3;8668:67;:::i;:::-;8661:74;;8744:93;8833:3;8744:93;:::i;:::-;8862:2;8857:3;8853:12;8846:19;;8505:366;;;:::o;8877:419::-;9043:4;9081:2;9070:9;9066:18;9058:26;;9130:9;9124:4;9120:20;9116:1;9105:9;9101:17;9094:47;9158:131;9284:4;9158:131;:::i;:::-;9150:139;;8877:419;;;:::o;9302:356::-;9435:4;9473:2;9462:9;9458:18;9450:26;;9486:71;9554:1;9543:9;9539:17;9530:6;9486:71;:::i;:::-;9567:84;9647:2;9636:9;9632:18;9623:6;9567:84;:::i;:::-;9302:356;;;;;:::o;9664:168::-;9804:20;9800:1;9792:6;9788:14;9781:44;9664:168;:::o;9838:366::-;9980:3;10001:67;10065:2;10060:3;10001:67;:::i;:::-;9994:74;;10077:93;10166:3;10077:93;:::i;:::-;10195:2;10190:3;10186:12;10179:19;;9838:366;;;:::o;10210:419::-;10376:4;10414:2;10403:9;10399:18;10391:26;;10463:9;10457:4;10453:20;10449:1;10438:9;10434:17;10427:47;10491:131;10617:4;10491:131;:::i;:::-;10483:139;;10210:419;;;:::o;10635:171::-;10775:23;10771:1;10763:6;10759:14;10752:47;10635:171;:::o;10812:366::-;10954:3;10975:67;11039:2;11034:3;10975:67;:::i;:::-;10968:74;;11051:93;11140:3;11051:93;:::i;:::-;11169:2;11164:3;11160:12;11153:19;;10812:366;;;:::o;11184:419::-;11350:4;11388:2;11377:9;11373:18;11365:26;;11437:9;11431:4;11427:20;11423:1;11412:9;11408:17;11401:47;11465:131;11591:4;11465:131;:::i;:::-;11457:139;;11184:419;;;:::o;11609:176::-;11749:28;11745:1;11737:6;11733:14;11726:52;11609:176;:::o;11791:366::-;11933:3;11954:67;12018:2;12013:3;11954:67;:::i;:::-;11947:74;;12030:93;12119:3;12030:93;:::i;:::-;12148:2;12143:3;12139:12;12132:19;;11791:366;;;:::o;12163:419::-;12329:4;12367:2;12356:9;12352:18;12344:26;;12416:9;12410:4;12406:20;12402:1;12391:9;12387:17;12380:47;12444:131;12570:4;12444:131;:::i;:::-;12436:139;;12163:419;;;:::o;12588:116::-;12658:21;12673:5;12658:21;:::i;:::-;12651:5;12648:32;12638:60;;12694:1;12691;12684:12;12638:60;12588:116;:::o;12710:137::-;12764:5;12795:6;12789:13;12780:22;;12811:30;12835:5;12811:30;:::i;:::-;12710:137;;;;:::o;12853:345::-;12920:6;12969:2;12957:9;12948:7;12944:23;12940:32;12937:119;;;12975:79;;:::i;:::-;12937:119;13095:1;13120:61;13173:7;13164:6;13153:9;13149:22;13120:61;:::i;:::-;13110:71;;13066:125;12853:345;;;;:::o;13204:181::-;13344:33;13340:1;13332:6;13328:14;13321:57;13204:181;:::o;13391:366::-;13533:3;13554:67;13618:2;13613:3;13554:67;:::i;:::-;13547:74;;13630:93;13719:3;13630:93;:::i;:::-;13748:2;13743:3;13739:12;13732:19;;13391:366;;;:::o;13763:419::-;13929:4;13967:2;13956:9;13952:18;13944:26;;14016:9;14010:4;14006:20;14002:1;13991:9;13987:17;13980:47;14044:131;14170:4;14044:131;:::i;:::-;14036:139;;13763:419;;;:::o;14188:143::-;14245:5;14276:6;14270:13;14261:22;;14292:33;14319:5;14292:33;:::i;:::-;14188:143;;;;:::o;14337:351::-;14407:6;14456:2;14444:9;14435:7;14431:23;14427:32;14424:119;;;14462:79;;:::i;:::-;14424:119;14582:1;14607:64;14663:7;14654:6;14643:9;14639:22;14607:64;:::i;:::-;14597:74;;14553:128;14337:351;;;;:::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "1201800",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "LARGE_PRIZE()": "395",
            "MEDIUM_PRIZE()": "351",
            "PRICE_PER_BOX()": "397",
            "SMALL_PRIZE()": "396",
            "TOTAL_BOXES()": "353",
            "boxes(uint256)": "infinite",
            "claimPrize(uint256)": "infinite",
            "getBoxStatus(uint256)": "infinite",
            "nftToken()": "infinite",
            "openBox(uint256)": "infinite",
            "owner()": "2611",
            "renounceOwnership()": "infinite",
            "setNFTTokenContract(address)": "infinite",
            "transferOwnership(address)": "infinite",
            "withdraw()": "infinite"
          },
          "internal": {
            "_initializeBoxes()": "infinite"
          }
        },
        "methodIdentifiers": {
          "LARGE_PRIZE()": "eb9780cc",
          "MEDIUM_PRIZE()": "d4b3c617",
          "PRICE_PER_BOX()": "4af2b440",
          "SMALL_PRIZE()": "b8b3b48d",
          "TOTAL_BOXES()": "373692dc",
          "boxes(uint256)": "4ed3faf2",
          "claimPrize(uint256)": "d7098154",
          "getBoxStatus(uint256)": "4dfa3444",
          "nftToken()": "d06fcba8",
          "openBox(uint256)": "b1e5e2b7",
          "owner()": "8da5cb5b",
          "renounceOwnership()": "715018a6",
          "setNFTTokenContract(address)": "a921bc5b",
          "transferOwnership(address)": "f2fde38b",
          "withdraw()": "3ccfd60b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BoxLottery.PrizeType\",\"name\":\"prizeType\",\"type\":\"uint8\"}],\"name\":\"BoxOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftTokenContract\",\"type\":\"address\"}],\"name\":\"NFTTokenContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BoxLottery.PrizeType\",\"name\":\"prizeType\",\"type\":\"uint8\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LARGE_PRIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MEDIUM_PRIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PER_BOX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMALL_PRIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_BOXES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"opened\",\"type\":\"bool\"},{\"internalType\":\"enum BoxLottery.PrizeType\",\"name\":\"prizeType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"}],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"}],\"name\":\"getBoxStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"opened\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftToken\",\"outputs\":[{\"internalType\":\"contract NFTToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"}],\"name\":\"openBox\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftToken\",\"type\":\"address\"}],\"name\":\"setNFTTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BoxLottery.sol\":\"BoxLottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title ERC-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x1b8691e244f6e11d987459993671db0af33e6a29f7805eac6a9925cc6b601957\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"./utils/ERC721Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0x39ed367e54765186281efcfe83e47cf0ad62cc879f10e191360712507125f29a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC-721 Burnable Token\\n * @dev ERC-721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdee1ff07172e443c6600581fc4f11e7830a6d33e4e551752935b835d52a09404\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the ERC that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: {ERC721} extensions that implement custom `balanceOf` logic, such as {ERC721Consecutive},\\n * interfere with enumerability and should not be used together with {ERC721Enumerable}.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        mapping(uint256 index => uint256) storage _ownedTokensByOwner = _ownedTokens[from];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokensByOwner[lastTokenIndex];\\n\\n            _ownedTokensByOwner[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokensByOwner[lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5191f783af281c75b7de0f1e3e36cdc6ac5cb2358d929584c4953fd02fa2b5eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC-721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {IERC4906-MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x2b27b58570ff2456c7e65022a356c7e4f205bfabf95d0e870855a86587bb1356\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721Receiver-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xddab643169f47a2c5291afafcbfdca045d9e6835553307d090bc048b6dabd0ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\\n        (1 << 0x08) | // backspace\\n            (1 << 0x09) | // tab\\n            (1 << 0x0a) | // newline\\n            (1 << 0x0c) | // form feed\\n            (1 << 0x0d) | // carriage return\\n            (1 << 0x22) | // double quote\\n            (1 << 0x5c); // backslash\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress-string} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\\n     *\\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\\n     *\\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\\n     * characters that are not in this range, but other tooling may provide different results.\\n     */\\n    function escapeJSON(string memory input) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(input);\\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\\n        uint256 outputLength = 0;\\n\\n        for (uint256 i; i < buffer.length; ++i) {\\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\\n                output[outputLength++] = \\\"\\\\\\\\\\\";\\n                if (char == 0x08) output[outputLength++] = \\\"b\\\";\\n                else if (char == 0x09) output[outputLength++] = \\\"t\\\";\\n                else if (char == 0x0a) output[outputLength++] = \\\"n\\\";\\n                else if (char == 0x0c) output[outputLength++] = \\\"f\\\";\\n                else if (char == 0x0d) output[outputLength++] = \\\"r\\\";\\n                else if (char == 0x5c) output[outputLength++] = \\\"\\\\\\\\\\\";\\n                else if (char == 0x22) {\\n                    // solhint-disable-next-line quotes\\n                    output[outputLength++] = '\\\"';\\n                }\\n            } else {\\n                output[outputLength++] = char;\\n            }\\n        }\\n        // write the actual length and deallocate unused memory\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(output, outputLength)\\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\\n        }\\n\\n        return string(output);\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81c274a60a7ae232ae3dc9ff3a4011b4849a853c13b0832cd3351bb1bb2f0dae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/BoxLottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./NFTToken.sol\\\";\\r\\n\\r\\ncontract BoxLottery is Ownable, ReentrancyGuard {\\r\\n    // \\u5956\\u54c1\\u7c7b\\u578b\\u679a\\u4e3e\\r\\n    enum PrizeType {\\r\\n        NOTHING,    // \\u8c22\\u8c22\\u60e0\\u987e\\r\\n        SMALL_ETH,  // 0.002 ETH\\r\\n        MEDIUM_ETH, // 0.1 ETH\\r\\n        LARGE_ETH,  // 1 ETH\\r\\n        NFT        // NFT\\u5956\\u52b1\\r\\n    }\\r\\n\\r\\n    // \\u683c\\u5b50\\u72b6\\u6001\\u7ed3\\u6784\\r\\n    struct Box {\\r\\n        bool opened;\\r\\n        PrizeType prizeType;\\r\\n        bool claimed;\\r\\n    }\\r\\n\\r\\n    // \\u72b6\\u6001\\u53d8\\u91cf\\r\\n    uint256 public constant TOTAL_BOXES = 100;\\r\\n    uint256 public constant PRICE_PER_BOX = 0.015 ether;\\r\\n    uint256 public constant SMALL_PRIZE = 0.002 ether;\\r\\n    uint256 public constant MEDIUM_PRIZE = 0.1 ether;\\r\\n    uint256 public constant LARGE_PRIZE = 1 ether;\\r\\n    \\r\\n    mapping(uint256 => Box) public boxes;\\r\\n    \\r\\n    // NFTToken \\u5408\\u7ea6\\r\\n    NFTToken public nftToken;\\r\\n    \\r\\n    // \\u4e8b\\u4ef6\\r\\n    event BoxOpened(address indexed player, uint256 boxId, PrizeType prizeType);\\r\\n    event PrizeClaimed(address indexed player, uint256 boxId, PrizeType prizeType);\\r\\n    event NFTTokenContractSet(address indexed nftTokenContract);\\r\\n\\r\\n    constructor() Ownable(msg.sender) {\\r\\n        _initializeBoxes();\\r\\n    }\\r\\n\\r\\n    // \\u8bbe\\u7f6e NFTToken \\u5408\\u7ea6\\u5730\\u5740\\r\\n    function setNFTTokenContract(address _nftToken) external onlyOwner {\\r\\n        require(_nftToken != address(0), \\\"Invalid NFT token address\\\");\\r\\n        nftToken = NFTToken(_nftToken);\\r\\n        emit NFTTokenContractSet(_nftToken);\\r\\n    }\\r\\n\\r\\n    // \\u521d\\u59cb\\u5316\\u6240\\u6709\\u683c\\u5b50\\r\\n    function _initializeBoxes() private {\\r\\n        uint256[] memory indices = new uint256[](TOTAL_BOXES);\\r\\n        for(uint256 i = 0; i < TOTAL_BOXES; i++) {\\r\\n            indices[i] = i;\\r\\n        }\\r\\n\\r\\n        // Fisher-Yates \\u6d17\\u724c\\u7b97\\u6cd5\\r\\n        for(uint256 i = TOTAL_BOXES - 1; i > 0; i--) {\\r\\n            uint256 j = uint256(keccak256(abi.encodePacked(block.timestamp, i))) % (i + 1);\\r\\n            (indices[i], indices[j]) = (indices[j], indices[i]);\\r\\n        }\\r\\n\\r\\n        // \\u5206\\u914d\\u5956\\u54c1\\r\\n        uint256 currentIndex = 0;\\r\\n        \\r\\n        // \\u5206\\u914d1\\u4e2a\\u5927\\u5956 (1 ETH)\\r\\n        boxes[indices[currentIndex++]] = Box(false, PrizeType.LARGE_ETH, false);\\r\\n        \\r\\n        // \\u5206\\u914d3\\u4e2a\\u4e2d\\u5956 (0.1 ETH)\\r\\n        for(uint256 i = 0; i < 3; i++) {\\r\\n            boxes[indices[currentIndex++]] = Box(false, PrizeType.MEDIUM_ETH, false);\\r\\n        }\\r\\n        \\r\\n        // \\u5206\\u914d15\\u4e2a\\u5c0f\\u5956 (0.002 ETH)\\r\\n        for(uint256 i = 0; i < 15; i++) {\\r\\n            boxes[indices[currentIndex++]] = Box(false, PrizeType.SMALL_ETH, false);\\r\\n        }\\r\\n        \\r\\n        // \\u5206\\u914d6\\u4e2aNFT\\u5956\\u52b1\\r\\n        for(uint256 i = 0; i < 6; i++) {\\r\\n            boxes[indices[currentIndex++]] = Box(false, PrizeType.NFT, false);\\r\\n        }\\r\\n        \\r\\n        // \\u5269\\u4f59\\u7684\\u90fd\\u662f\\u8c22\\u8c22\\u60e0\\u987e\\r\\n        for(uint256 i = currentIndex; i < TOTAL_BOXES; i++) {\\r\\n            boxes[indices[i]] = Box(false, PrizeType.NOTHING, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // \\u6253\\u5f00\\u76d2\\u5b50\\r\\n    function openBox(uint256 boxId) external payable nonReentrant {\\r\\n        require(boxId < TOTAL_BOXES, \\\"Invalid box ID\\\");\\r\\n        require(!boxes[boxId].opened, \\\"Box already opened\\\");\\r\\n        require(msg.value == PRICE_PER_BOX, \\\"Incorrect payment amount\\\");\\r\\n\\r\\n        boxes[boxId].opened = true;\\r\\n        \\r\\n        emit BoxOpened(msg.sender, boxId, boxes[boxId].prizeType);\\r\\n    }\\r\\n\\r\\n    // \\u9886\\u53d6\\u5956\\u54c1\\r\\n    function claimPrize(uint256 boxId) external nonReentrant {\\r\\n        require(boxId < TOTAL_BOXES, \\\"Invalid box ID\\\");\\r\\n        require(boxes[boxId].opened, \\\"Box not opened yet\\\");\\r\\n        require(!boxes[boxId].claimed, \\\"Prize already claimed\\\");\\r\\n        \\r\\n        if (boxes[boxId].prizeType == PrizeType.NFT) {\\r\\n            require(address(nftToken) != address(0), \\\"NFT token contract not set\\\");\\r\\n            require(nftToken.isMinter(address(this)), \\\"Contract not authorized to mint\\\");\\r\\n        }\\r\\n        \\r\\n        boxes[boxId].claimed = true;\\r\\n        \\r\\n        if (boxes[boxId].prizeType == PrizeType.SMALL_ETH) {\\r\\n            payable(msg.sender).transfer(SMALL_PRIZE);\\r\\n        } else if (boxes[boxId].prizeType == PrizeType.MEDIUM_ETH) {\\r\\n            payable(msg.sender).transfer(MEDIUM_PRIZE);\\r\\n        } else if (boxes[boxId].prizeType == PrizeType.LARGE_ETH) {\\r\\n            payable(msg.sender).transfer(LARGE_PRIZE);\\r\\n        } else if (boxes[boxId].prizeType == PrizeType.NFT) {\\r\\n            nftToken.safeMint(msg.sender);\\r\\n        }\\r\\n        \\r\\n        emit PrizeClaimed(msg.sender, boxId, boxes[boxId].prizeType);\\r\\n    }\\r\\n\\r\\n    // \\u67e5\\u770b\\u76d2\\u5b50\\u72b6\\u6001\\r\\n    function getBoxStatus(uint256 boxId) external view returns (bool opened, bool claimed) {\\r\\n        require(boxId < TOTAL_BOXES, \\\"Invalid box ID\\\");\\r\\n        return (boxes[boxId].opened, boxes[boxId].claimed);\\r\\n    }\\r\\n\\r\\n    // \\u5408\\u7ea6\\u62e5\\u6709\\u8005\\u63d0\\u53d6\\u8d44\\u91d1\\r\\n    function withdraw() external onlyOwner {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    // \\u786e\\u4fdd\\u5408\\u7ea6\\u53ef\\u4ee5\\u63a5\\u6536ETH\\r\\n    receive() external payable {}\\r\\n} \",\"keccak256\":\"0x702e7de2eb709505cb440c00d06304dd187251dd96555f79a3b27f4570fb155e\",\"license\":\"MIT\"},\"contracts/NFTToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport {ERC721Burnable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\r\\nimport {ERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport {ERC721URIStorage} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract NFTToken is ERC721, ERC721Enumerable, ERC721URIStorage, ERC721Burnable, Ownable {\\r\\n    uint256 private _nextTokenId;\\r\\n    string constant METADATA_URI = \\\"ipfs://QmatiLZoj7PZwU3gcqMwAhN5QmN1GoBuxjRWbk9DxQZtfB\\\";\\r\\n    \\r\\n    // \\u6388\\u6743\\u5730\\u5740\\u6620\\u5c04\\r\\n    mapping(address => bool) public authorizedMinters;\\r\\n    // \\u8bb0\\u5f55\\u6388\\u6743\\u5730\\u5740\\u94f8\\u9020\\u6b21\\u6570\\r\\n    mapping(address => uint256) public minterMintCount;\\r\\n    \\r\\n    // \\u4e8b\\u4ef6\\r\\n    event MinterAuthorized(address indexed minter);\\r\\n    event MinterRevoked(address indexed minter);\\r\\n    event TokenMinted(address indexed minter, address indexed to, uint256 tokenId);\\r\\n    \\r\\n    constructor(string memory _name, string memory _symbol)\\r\\n        ERC721(_name, _symbol)\\r\\n        Ownable(msg.sender)\\r\\n    {}\\r\\n    \\r\\n    // \\u4fee\\u9970\\u5668\\uff1a\\u68c0\\u67e5\\u662f\\u5426\\u662f\\u6388\\u6743\\u5730\\u5740\\u5e76\\u4e14\\u672a\\u8d85\\u8fc7\\u94f8\\u9020\\u9650\\u5236\\r\\n    modifier onlyAuthorizedMinter() {\\r\\n        bool isOwner = owner() == _msgSender();\\r\\n        bool isAuthorized = authorizedMinters[_msgSender()];\\r\\n        bool withinLimit = minterMintCount[_msgSender()] < 100;\\r\\n        \\r\\n        require(\\r\\n            isOwner || (isAuthorized && withinLimit),\\r\\n            \\\"Not authorized to mint or limit reached\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    // \\u6388\\u6743\\u5730\\u5740\\u53ef\\u4ee5\\u94f8\\u9020\\r\\n    function safeMint(address to) public onlyAuthorizedMinter returns (uint256) {\\r\\n        uint256 tokenId = _nextTokenId++;\\r\\n        _safeMint(to, tokenId);\\r\\n        _setTokenURI(tokenId, METADATA_URI);\\r\\n        \\r\\n        // \\u5982\\u679c\\u662f\\u6388\\u6743\\u5730\\u5740\\uff08\\u975e\\u6240\\u6709\\u8005\\uff09\\uff0c\\u589e\\u52a0\\u94f8\\u9020\\u8ba1\\u6570\\r\\n        if (_msgSender() != owner()) {\\r\\n            minterMintCount[_msgSender()]++;\\r\\n        }\\r\\n        \\r\\n        emit TokenMinted(_msgSender(), to, tokenId);\\r\\n        return tokenId;\\r\\n    }\\r\\n    \\r\\n    // \\u6dfb\\u52a0\\u6388\\u6743\\u5730\\u5740\\r\\n    function addMinter(address minter) external onlyOwner {\\r\\n        require(minter != address(0), \\\"Invalid minter address\\\");\\r\\n        require(!authorizedMinters[minter], \\\"Minter already authorized\\\");\\r\\n        authorizedMinters[minter] = true;\\r\\n        // \\u91cd\\u7f6e\\u94f8\\u9020\\u8ba1\\u6570\\r\\n        minterMintCount[minter] = 0;\\r\\n        emit MinterAuthorized(minter);\\r\\n    }\\r\\n    \\r\\n    // \\u79fb\\u9664\\u6388\\u6743\\u5730\\u5740\\r\\n    function removeMinter(address minter) external onlyOwner {\\r\\n        require(authorizedMinters[minter], \\\"Minter not authorized\\\");\\r\\n        authorizedMinters[minter] = false;\\r\\n        // \\u6e05\\u9664\\u94f8\\u9020\\u8ba1\\u6570\\r\\n        delete minterMintCount[minter];\\r\\n        emit MinterRevoked(minter);\\r\\n    }\\r\\n    \\r\\n    // \\u68c0\\u67e5\\u5730\\u5740\\u662f\\u5426\\u6709\\u94f8\\u9020\\u6743\\u9650\\r\\n    function isMinter(address account) public view returns (bool) {\\r\\n        if (owner() == account) return true;\\r\\n        return authorizedMinters[account] && minterMintCount[account] == 0;\\r\\n    }\\r\\n    \\r\\n    // \\u67e5\\u8be2\\u6388\\u6743\\u5730\\u5740\\u5df2\\u94f8\\u9020\\u7684 NFT \\u6570\\u91cf\\r\\n    function getMinterMintCount(address minter) external view returns (uint256) {\\r\\n        return minterMintCount[minter];\\r\\n    }\\r\\n    \\r\\n    // \\u91cd\\u7f6e\\u6388\\u6743\\u5730\\u5740\\u7684\\u94f8\\u9020\\u6b21\\u6570\\uff08\\u53ea\\u6709\\u5408\\u7ea6\\u62e5\\u6709\\u8005\\u53ef\\u4ee5\\u8c03\\u7528\\uff09\\r\\n    function resetMinterMintCount(address minter) external onlyOwner {\\r\\n        require(authorizedMinters[minter], \\\"Address is not an authorized minter\\\");\\r\\n        minterMintCount[minter] = 0;\\r\\n    }\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    function _update(address to, uint256 tokenId, address auth)\\r\\n        internal\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n        returns (address)\\r\\n    {\\r\\n        return super._update(to, tokenId, auth);\\r\\n    }\\r\\n\\r\\n    function _increaseBalance(address account, uint128 value)\\r\\n        internal\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n    {\\r\\n        super._increaseBalance(account, value);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721Enumerable, ERC721URIStorage)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x61a8863d2d9ce419832ad8d6a041e0da150d2177ab5e7a06fefd1e89067aaec2\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 8,
            "contract": "contracts/BoxLottery.sol:BoxLottery",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2179,
            "contract": "contracts/BoxLottery.sol:BoxLottery",
            "label": "_status",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7248,
            "contract": "contracts/BoxLottery.sol:BoxLottery",
            "label": "boxes",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(Box)7228_storage)"
          },
          {
            "astId": 7251,
            "contract": "contracts/BoxLottery.sol:BoxLottery",
            "label": "nftToken",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(NFTToken)8123"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(NFTToken)8123": {
            "encoding": "inplace",
            "label": "contract NFTToken",
            "numberOfBytes": "20"
          },
          "t_enum(PrizeType)7220": {
            "encoding": "inplace",
            "label": "enum BoxLottery.PrizeType",
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint256,t_struct(Box)7228_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct BoxLottery.Box)",
            "numberOfBytes": "32",
            "value": "t_struct(Box)7228_storage"
          },
          "t_struct(Box)7228_storage": {
            "encoding": "inplace",
            "label": "struct BoxLottery.Box",
            "members": [
              {
                "astId": 7222,
                "contract": "contracts/BoxLottery.sol:BoxLottery",
                "label": "opened",
                "offset": 0,
                "slot": "0",
                "type": "t_bool"
              },
              {
                "astId": 7225,
                "contract": "contracts/BoxLottery.sol:BoxLottery",
                "label": "prizeType",
                "offset": 1,
                "slot": "0",
                "type": "t_enum(PrizeType)7220"
              },
              {
                "astId": 7227,
                "contract": "contracts/BoxLottery.sol:BoxLottery",
                "label": "claimed",
                "offset": 2,
                "slot": "0",
                "type": "t_bool"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC4906.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title ERC-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"./utils/ERC721Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC-721 Burnable Token\\n * @dev ERC-721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the ERC that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: {ERC721} extensions that implement custom `balanceOf` logic, such as {ERC721Consecutive},\\n * interfere with enumerability and should not be used together with {ERC721Enumerable}.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        mapping(uint256 index => uint256) storage _ownedTokensByOwner = _ownedTokens[from];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokensByOwner[lastTokenIndex];\\n\\n            _ownedTokensByOwner[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokensByOwner[lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC-721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {IERC4906-MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721Receiver-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2²⁵⁶ + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\\n            // This is going to be our x_0 (and ε_0)\\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\\n            //              = ((x_n² + a) / (2 * x_n))² - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\\n            //              = (x_n² - a)² / (2 * x_n)²\\n            //              = ((x_n² - a) / (2 * x_n))²\\n            //              ≥ 0\\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\\n            //         = | ε_n² / (2 * x_n) |\\n            //         = ε_n² / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // ε_1 = ε_0² / | (2 * x_0) |\\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\\n            //     ≤ 2**(e-3) / 3\\n            //     ≤ 2**(e-3-log2(3))\\n            //     ≤ 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\\n            //         ≤ 2**(2*e-2*k) / 2**e\\n            //         ≤ 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\\n\\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Panic.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\\n        (1 << 0x08) | // backspace\\n            (1 << 0x09) | // tab\\n            (1 << 0x0a) | // newline\\n            (1 << 0x0c) | // form feed\\n            (1 << 0x0d) | // carriage return\\n            (1 << 0x22) | // double quote\\n            (1 << 0x5c); // backslash\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress-string} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\\n     *\\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\\n     *\\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\\n     * characters that are not in this range, but other tooling may provide different results.\\n     */\\n    function escapeJSON(string memory input) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(input);\\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\\n        uint256 outputLength = 0;\\n\\n        for (uint256 i; i < buffer.length; ++i) {\\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\\n                output[outputLength++] = \\\"\\\\\\\\\\\";\\n                if (char == 0x08) output[outputLength++] = \\\"b\\\";\\n                else if (char == 0x09) output[outputLength++] = \\\"t\\\";\\n                else if (char == 0x0a) output[outputLength++] = \\\"n\\\";\\n                else if (char == 0x0c) output[outputLength++] = \\\"f\\\";\\n                else if (char == 0x0d) output[outputLength++] = \\\"r\\\";\\n                else if (char == 0x5c) output[outputLength++] = \\\"\\\\\\\\\\\";\\n                else if (char == 0x22) {\\n                    // solhint-disable-next-line quotes\\n                    output[outputLength++] = '\\\"';\\n                }\\n            } else {\\n                output[outputLength++] = char;\\n            }\\n        }\\n        // write the actual length and deallocate unused memory\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(output, outputLength)\\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\\n        }\\n\\n        return string(output);\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/BoxLottery.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./NFTToken.sol\\\";\\r\\n\\r\\ncontract BoxLottery is Ownable, ReentrancyGuard {\\r\\n    // 奖品类型枚举\\r\\n    enum PrizeType {\\r\\n        NOTHING,    // 谢谢惠顾\\r\\n        SMALL_ETH,  // 0.002 ETH\\r\\n        MEDIUM_ETH, // 0.1 ETH\\r\\n        LARGE_ETH,  // 1 ETH\\r\\n        NFT        // NFT奖励\\r\\n    }\\r\\n\\r\\n    // 格子状态结构\\r\\n    struct Box {\\r\\n        bool opened;\\r\\n        PrizeType prizeType;\\r\\n        bool claimed;\\r\\n    }\\r\\n\\r\\n    // 状态变量\\r\\n    uint256 public constant TOTAL_BOXES = 100;\\r\\n    uint256 public constant PRICE_PER_BOX = 0.015 ether;\\r\\n    uint256 public constant SMALL_PRIZE = 0.002 ether;\\r\\n    uint256 public constant MEDIUM_PRIZE = 0.1 ether;\\r\\n    uint256 public constant LARGE_PRIZE = 1 ether;\\r\\n    \\r\\n    mapping(uint256 => Box) public boxes;\\r\\n    \\r\\n    // NFTToken 合约\\r\\n    NFTToken public nftToken;\\r\\n    \\r\\n    // 事件\\r\\n    event BoxOpened(address indexed player, uint256 boxId, PrizeType prizeType);\\r\\n    event PrizeClaimed(address indexed player, uint256 boxId, PrizeType prizeType);\\r\\n    event NFTTokenContractSet(address indexed nftTokenContract);\\r\\n\\r\\n    constructor() Ownable(msg.sender) {\\r\\n        _initializeBoxes();\\r\\n    }\\r\\n\\r\\n    // 设置 NFTToken 合约地址\\r\\n    function setNFTTokenContract(address _nftToken) external onlyOwner {\\r\\n        require(_nftToken != address(0), \\\"Invalid NFT token address\\\");\\r\\n        nftToken = NFTToken(_nftToken);\\r\\n        emit NFTTokenContractSet(_nftToken);\\r\\n    }\\r\\n\\r\\n    // 初始化所有格子\\r\\n    function _initializeBoxes() private {\\r\\n        uint256[] memory indices = new uint256[](TOTAL_BOXES);\\r\\n        for(uint256 i = 0; i < TOTAL_BOXES; i++) {\\r\\n            indices[i] = i;\\r\\n        }\\r\\n\\r\\n        // Fisher-Yates 洗牌算法\\r\\n        for(uint256 i = TOTAL_BOXES - 1; i > 0; i--) {\\r\\n            uint256 j = uint256(keccak256(abi.encodePacked(block.timestamp, i))) % (i + 1);\\r\\n            (indices[i], indices[j]) = (indices[j], indices[i]);\\r\\n        }\\r\\n\\r\\n        // 分配奖品\\r\\n        uint256 currentIndex = 0;\\r\\n        \\r\\n        // 分配1个大奖 (1 ETH)\\r\\n        boxes[indices[currentIndex++]] = Box(false, PrizeType.LARGE_ETH, false);\\r\\n        \\r\\n        // 分配3个中奖 (0.1 ETH)\\r\\n        for(uint256 i = 0; i < 3; i++) {\\r\\n            boxes[indices[currentIndex++]] = Box(false, PrizeType.MEDIUM_ETH, false);\\r\\n        }\\r\\n        \\r\\n        // 分配15个小奖 (0.002 ETH)\\r\\n        for(uint256 i = 0; i < 15; i++) {\\r\\n            boxes[indices[currentIndex++]] = Box(false, PrizeType.SMALL_ETH, false);\\r\\n        }\\r\\n        \\r\\n        // 分配6个NFT奖励\\r\\n        for(uint256 i = 0; i < 6; i++) {\\r\\n            boxes[indices[currentIndex++]] = Box(false, PrizeType.NFT, false);\\r\\n        }\\r\\n        \\r\\n        // 剩余的都是谢谢惠顾\\r\\n        for(uint256 i = currentIndex; i < TOTAL_BOXES; i++) {\\r\\n            boxes[indices[i]] = Box(false, PrizeType.NOTHING, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // 打开盒子\\r\\n    function openBox(uint256 boxId) external payable nonReentrant {\\r\\n        require(boxId < TOTAL_BOXES, \\\"Invalid box ID\\\");\\r\\n        require(!boxes[boxId].opened, \\\"Box already opened\\\");\\r\\n        require(msg.value == PRICE_PER_BOX, \\\"Incorrect payment amount\\\");\\r\\n\\r\\n        boxes[boxId].opened = true;\\r\\n        \\r\\n        emit BoxOpened(msg.sender, boxId, boxes[boxId].prizeType);\\r\\n    }\\r\\n\\r\\n    // 领取奖品\\r\\n    function claimPrize(uint256 boxId) external nonReentrant {\\r\\n        require(boxId < TOTAL_BOXES, \\\"Invalid box ID\\\");\\r\\n        require(boxes[boxId].opened, \\\"Box not opened yet\\\");\\r\\n        require(!boxes[boxId].claimed, \\\"Prize already claimed\\\");\\r\\n        \\r\\n        if (boxes[boxId].prizeType == PrizeType.NFT) {\\r\\n            require(address(nftToken) != address(0), \\\"NFT token contract not set\\\");\\r\\n            require(nftToken.isMinter(address(this)), \\\"Contract not authorized to mint\\\");\\r\\n        }\\r\\n        \\r\\n        boxes[boxId].claimed = true;\\r\\n        \\r\\n        if (boxes[boxId].prizeType == PrizeType.SMALL_ETH) {\\r\\n            payable(msg.sender).transfer(SMALL_PRIZE);\\r\\n        } else if (boxes[boxId].prizeType == PrizeType.MEDIUM_ETH) {\\r\\n            payable(msg.sender).transfer(MEDIUM_PRIZE);\\r\\n        } else if (boxes[boxId].prizeType == PrizeType.LARGE_ETH) {\\r\\n            payable(msg.sender).transfer(LARGE_PRIZE);\\r\\n        } else if (boxes[boxId].prizeType == PrizeType.NFT) {\\r\\n            nftToken.safeMint(msg.sender);\\r\\n        }\\r\\n        \\r\\n        emit PrizeClaimed(msg.sender, boxId, boxes[boxId].prizeType);\\r\\n    }\\r\\n\\r\\n    // 查看盒子状态\\r\\n    function getBoxStatus(uint256 boxId) external view returns (bool opened, bool claimed) {\\r\\n        require(boxId < TOTAL_BOXES, \\\"Invalid box ID\\\");\\r\\n        return (boxes[boxId].opened, boxes[boxId].claimed);\\r\\n    }\\r\\n\\r\\n    // 合约拥有者提取资金\\r\\n    function withdraw() external onlyOwner {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    // 确保合约可以接收ETH\\r\\n    receive() external payable {}\\r\\n} \"\n    },\n    \"contracts/NFTToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport {ERC721Burnable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\r\\nimport {ERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport {ERC721URIStorage} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract NFTToken is ERC721, ERC721Enumerable, ERC721URIStorage, ERC721Burnable, Ownable {\\r\\n    uint256 private _nextTokenId;\\r\\n    string constant METADATA_URI = \\\"ipfs://QmatiLZoj7PZwU3gcqMwAhN5QmN1GoBuxjRWbk9DxQZtfB\\\";\\r\\n    \\r\\n    // 授权地址映射\\r\\n    mapping(address => bool) public authorizedMinters;\\r\\n    // 记录授权地址铸造次数\\r\\n    mapping(address => uint256) public minterMintCount;\\r\\n    \\r\\n    // 事件\\r\\n    event MinterAuthorized(address indexed minter);\\r\\n    event MinterRevoked(address indexed minter);\\r\\n    event TokenMinted(address indexed minter, address indexed to, uint256 tokenId);\\r\\n    \\r\\n    constructor(string memory _name, string memory _symbol)\\r\\n        ERC721(_name, _symbol)\\r\\n        Ownable(msg.sender)\\r\\n    {}\\r\\n    \\r\\n    // 修饰器：检查是否是授权地址并且未超过铸造限制\\r\\n    modifier onlyAuthorizedMinter() {\\r\\n        bool isOwner = owner() == _msgSender();\\r\\n        bool isAuthorized = authorizedMinters[_msgSender()];\\r\\n        bool withinLimit = minterMintCount[_msgSender()] < 100;\\r\\n        \\r\\n        require(\\r\\n            isOwner || (isAuthorized && withinLimit),\\r\\n            \\\"Not authorized to mint or limit reached\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    // 授权地址可以铸造\\r\\n    function safeMint(address to) public onlyAuthorizedMinter returns (uint256) {\\r\\n        uint256 tokenId = _nextTokenId++;\\r\\n        _safeMint(to, tokenId);\\r\\n        _setTokenURI(tokenId, METADATA_URI);\\r\\n        \\r\\n        // 如果是授权地址（非所有者），增加铸造计数\\r\\n        if (_msgSender() != owner()) {\\r\\n            minterMintCount[_msgSender()]++;\\r\\n        }\\r\\n        \\r\\n        emit TokenMinted(_msgSender(), to, tokenId);\\r\\n        return tokenId;\\r\\n    }\\r\\n    \\r\\n    // 添加授权地址\\r\\n    function addMinter(address minter) external onlyOwner {\\r\\n        require(minter != address(0), \\\"Invalid minter address\\\");\\r\\n        require(!authorizedMinters[minter], \\\"Minter already authorized\\\");\\r\\n        authorizedMinters[minter] = true;\\r\\n        // 重置铸造计数\\r\\n        minterMintCount[minter] = 0;\\r\\n        emit MinterAuthorized(minter);\\r\\n    }\\r\\n    \\r\\n    // 移除授权地址\\r\\n    function removeMinter(address minter) external onlyOwner {\\r\\n        require(authorizedMinters[minter], \\\"Minter not authorized\\\");\\r\\n        authorizedMinters[minter] = false;\\r\\n        // 清除铸造计数\\r\\n        delete minterMintCount[minter];\\r\\n        emit MinterRevoked(minter);\\r\\n    }\\r\\n    \\r\\n    // 检查地址是否有铸造权限\\r\\n    function isMinter(address account) public view returns (bool) {\\r\\n        if (owner() == account) return true;\\r\\n        return authorizedMinters[account] && minterMintCount[account] == 0;\\r\\n    }\\r\\n    \\r\\n    // 查询授权地址已铸造的 NFT 数量\\r\\n    function getMinterMintCount(address minter) external view returns (uint256) {\\r\\n        return minterMintCount[minter];\\r\\n    }\\r\\n    \\r\\n    // 重置授权地址的铸造次数（只有合约拥有者可以调用）\\r\\n    function resetMinterMintCount(address minter) external onlyOwner {\\r\\n        require(authorizedMinters[minter], \\\"Address is not an authorized minter\\\");\\r\\n        minterMintCount[minter] = 0;\\r\\n    }\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    function _update(address to, uint256 tokenId, address auth)\\r\\n        internal\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n        returns (address)\\r\\n    {\\r\\n        return super._update(to, tokenId, auth);\\r\\n    }\\r\\n\\r\\n    function _increaseBalance(address account, uint128 value)\\r\\n        internal\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n    {\\r\\n        super._increaseBalance(account, value);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721Enumerable, ERC721URIStorage)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\"\n    }\n  },\n  \"settings\": {\n    \"evmVersion\": \"paris\",\n    \"optimizer\": {\n      \"enabled\": false,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "8bf50d57334662957f3977bf36400db9",
      "transactionHash": "0x5634a2e51936234aec92eaef256f0d42c18592c3068a900f6043f56df673e027",
      "args": []
    },
    "decoded": {
      "from": "0xfD2347cB40e73Fcafb17ade5a8ed6af895eD1c5c",
      "gasPrice": "1781137772",
      "maxFeePerGas": "1781137772",
      "maxPriorityFeePerGas": "1500000000",
      "gasLimit": "2440146",
      "to": null,
      "value": "0",
      "nonce": 84,
      "data": "0x60806040523480156200001157600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000885760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200007f91906200087e565b60405180910390fd5b6200009981620000b760201b60201c565b5060018081905550620000b16200017b60201b60201c565b62000b0e565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000606467ffffffffffffffff8111156200019b576200019a6200089b565b5b604051908082528060200260200182016040528015620001ca5781602001602082028036833780820191505090505b50905060005b6064811015620002135780828281518110620001f157620001f0620008ca565b5b60200260200101818152505080806200020a9062000932565b915050620001d0565b506000600160646200022691906200097f565b90505b600081111562000317576000600182620002449190620009ba565b42836040516020016200025992919062000a1a565b6040516020818303038152906040528051906020012060001c6200027e919062000a79565b9050828181518110620002965762000295620008ca565b5b6020026020010151838381518110620002b457620002b3620008ca565b5b6020026020010151848481518110620002d257620002d1620008ca565b5b60200260200101858481518110620002ef57620002ee620008ca565b5b60200260200101828152508281525050505080806200030e9062000ab1565b91505062000229565b50600060405180606001604052806000151581526020016003600481111562000345576200034462000adf565b5b81526020016000151581525060026000848480620003639062000932565b955081518110620003795762000378620008ca565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836004811115620003dd57620003dc62000adf565b5b021790555060408201518160000160026101000a81548160ff02191690831515021790555090505060005b600381101562000513576040518060600160405280600015158152602001600260048111156200043d576200043c62000adf565b5b815260200160001515815250600260008585806200045b9062000932565b965081518110620004715762000470620008ca565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836004811115620004d557620004d462000adf565b5b021790555060408201518160000160026101000a81548160ff02191690831515021790555090505080806200050a9062000932565b91505062000408565b5060005b600f81101562000622576040518060600160405280600015158152602001600160048111156200054c576200054b62000adf565b5b815260200160001515815250600260008585806200056a9062000932565b96508151811062000580576200057f620008ca565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836004811115620005e457620005e362000adf565b5b021790555060408201518160000160026101000a81548160ff0219169083151502179055509050508080620006199062000932565b91505062000517565b5060005b6006811015620007305760405180606001604052806000151581526020016004808111156200065a576200065962000adf565b5b81526020016000151581525060026000858580620006789062000932565b9650815181106200068e576200068d620008ca565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836004811115620006f257620006f162000adf565b5b021790555060408201518160000160026101000a81548160ff0219169083151502179055509050508080620007279062000932565b91505062000626565b5060008190505b606481101562000834576040518060600160405280600015158152602001600060048111156200076c576200076b62000adf565b5b81526020016000151581525060026000858481518110620007925762000791620008ca565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836004811115620007f657620007f562000adf565b5b021790555060408201518160000160026101000a81548160ff02191690831515021790555090505080806200082b9062000932565b91505062000737565b505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008668262000839565b9050919050565b620008788162000859565b82525050565b60006020820190506200089560008301846200086d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006200093f8262000928565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620009745762000973620008f9565b5b600182019050919050565b60006200098c8262000928565b9150620009998362000928565b9250828203905081811115620009b457620009b3620008f9565b5b92915050565b6000620009c78262000928565b9150620009d48362000928565b9250828201905080821115620009ef57620009ee620008f9565b5b92915050565b6000819050919050565b62000a1462000a0e8262000928565b620009f5565b82525050565b600062000a288285620009ff565b60208201915062000a3a8284620009ff565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000a868262000928565b915062000a938362000928565b92508262000aa65762000aa562000a4a565b5b828206905092915050565b600062000abe8262000928565b91506000820362000ad45762000ad3620008f9565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6117798062000b1e6000396000f3fe6080604052600436106100ec5760003560e01c8063a921bc5b1161008a578063d4b3c61711610059578063d4b3c617146102bf578063d7098154146102ea578063eb9780cc14610313578063f2fde38b1461033e576100f3565b8063a921bc5b14610224578063b1e5e2b71461024d578063b8b3b48d14610269578063d06fcba814610294576100f3565b80634dfa3444116100c65780634dfa3444146101655780634ed3faf2146101a3578063715018a6146101e25780638da5cb5b146101f9576100f3565b8063373692dc146100f85780633ccfd60b146101235780634af2b4401461013a576100f3565b366100f357005b600080fd5b34801561010457600080fd5b5061010d610367565b60405161011a9190611074565b60405180910390f35b34801561012f57600080fd5b5061013861036c565b005b34801561014657600080fd5b5061014f6103c4565b60405161015c9190611074565b60405180910390f35b34801561017157600080fd5b5061018c600480360381019061018791906110c0565b6103cf565b60405161019a929190611108565b60405180910390f35b3480156101af57600080fd5b506101ca60048036038101906101c591906110c0565b610466565b6040516101d9939291906111a8565b60405180910390f35b3480156101ee57600080fd5b506101f76104b7565b005b34801561020557600080fd5b5061020e6104cb565b60405161021b9190611220565b60405180910390f35b34801561023057600080fd5b5061024b60048036038101906102469190611267565b6104f4565b005b610267600480360381019061026291906110c0565b6105f2565b005b34801561027557600080fd5b5061027e610797565b60405161028b9190611074565b60405180910390f35b3480156102a057600080fd5b506102a96107a2565b6040516102b691906112f3565b60405180910390f35b3480156102cb57600080fd5b506102d46107c8565b6040516102e19190611074565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c91906110c0565b6107d4565b005b34801561031f57600080fd5b50610328610e27565b6040516103359190611074565b60405180910390f35b34801561034a57600080fd5b5061036560048036038101906103609190611267565b610e33565b005b606481565b610374610eb9565b61037c6104cb565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156103c1573d6000803e3d6000fd5b50565b66354a6ba7a1800081565b60008060648310610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040c9061136b565b60405180910390fd5b6002600084815260200190815260200160002060000160009054906101000a900460ff166002600085815260200190815260200160002060000160029054906101000a900460ff1691509150915091565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a900460ff16905083565b6104bf610eb9565b6104c96000610f40565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104fc610eb9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361056b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610562906113d7565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fc026bf37ffb9004f36e978cd2fbc05a6e6ba7cc21fb9f7ce3a3bdc8a01e225e460405160405180910390a250565b6105fa611004565b6064811061063d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106349061136b565b60405180910390fd5b6002600082815260200190815260200160002060000160009054906101000a900460ff16156106a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069890611443565b60405180910390fd5b66354a6ba7a1800034146106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e1906114af565b60405180910390fd5b60016002600083815260200190815260200160002060000160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f465d1db9798268665147c6840d57ac3aaedc3df105a473c524c00a37ffd9add4826002600085815260200190815260200160002060000160019054906101000a900460ff166040516107849291906114cf565b60405180910390a261079461104a565b50565b66071afd498d000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b67016345785d8a000081565b6107dc611004565b6064811061081f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108169061136b565b60405180910390fd5b6002600082815260200190815260200160002060000160009054906101000a900460ff16610882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087990611544565b60405180910390fd5b6002600082815260200190815260200160002060000160029054906101000a900460ff16156108e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dd906115b0565b60405180910390fd5b6004808111156108f9576108f8611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff16600481111561092f5761092e611131565b5b03610aa157600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036109c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bc9061161c565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aa271e1a306040518263ffffffff1660e01b8152600401610a209190611220565b602060405180830381865afa158015610a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a619190611668565b610aa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a97906116e1565b60405180910390fd5b5b60016002600083815260200190815260200160002060000160026101000a81548160ff02191690831515021790555060016004811115610ae457610ae3611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610b1a57610b19611131565b5b03610b72573373ffffffffffffffffffffffffffffffffffffffff166108fc66071afd498d00009081150290604051600060405180830381858888f19350505050158015610b6c573d6000803e3d6000fd5b50610da9565b60026004811115610b8657610b85611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610bbc57610bbb611131565b5b03610c15573373ffffffffffffffffffffffffffffffffffffffff166108fc67016345785d8a00009081150290604051600060405180830381858888f19350505050158015610c0f573d6000803e3d6000fd5b50610da8565b60036004811115610c2957610c28611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610c5f57610c5e611131565b5b03610cb8573373ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051600060405180830381858888f19350505050158015610cb2573d6000803e3d6000fd5b50610da7565b600480811115610ccb57610cca611131565b5b6002600083815260200190815260200160002060000160019054906101000a900460ff166004811115610d0157610d00611131565b5b03610da657600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340d097c3336040518263ffffffff1660e01b8152600401610d619190611220565b6020604051808303816000875af1158015610d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da49190611716565b505b5b5b5b3373ffffffffffffffffffffffffffffffffffffffff167f53e3c45643a014901c16ab423f86c7d01176630d62d4adef2c2396f539fc6567826002600085815260200190815260200160002060000160019054906101000a900460ff16604051610e149291906114cf565b60405180910390a2610e2461104a565b50565b670de0b6b3a764000081565b610e3b610eb9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ead5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610ea49190611220565b60405180910390fd5b610eb681610f40565b50565b610ec1611053565b73ffffffffffffffffffffffffffffffffffffffff16610edf6104cb565b73ffffffffffffffffffffffffffffffffffffffff1614610f3e57610f02611053565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610f359190611220565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600260015403611040576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b600033905090565b6000819050919050565b61106e8161105b565b82525050565b60006020820190506110896000830184611065565b92915050565b600080fd5b61109d8161105b565b81146110a857600080fd5b50565b6000813590506110ba81611094565b92915050565b6000602082840312156110d6576110d561108f565b5b60006110e4848285016110ab565b91505092915050565b60008115159050919050565b611102816110ed565b82525050565b600060408201905061111d60008301856110f9565b61112a60208301846110f9565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061117157611170611131565b5b50565b600081905061118282611160565b919050565b600061119282611174565b9050919050565b6111a281611187565b82525050565b60006060820190506111bd60008301866110f9565b6111ca6020830185611199565b6111d760408301846110f9565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061120a826111df565b9050919050565b61121a816111ff565b82525050565b60006020820190506112356000830184611211565b92915050565b611244816111ff565b811461124f57600080fd5b50565b6000813590506112618161123b565b92915050565b60006020828403121561127d5761127c61108f565b5b600061128b84828501611252565b91505092915050565b6000819050919050565b60006112b96112b46112af846111df565b611294565b6111df565b9050919050565b60006112cb8261129e565b9050919050565b60006112dd826112c0565b9050919050565b6112ed816112d2565b82525050565b600060208201905061130860008301846112e4565b92915050565b600082825260208201905092915050565b7f496e76616c696420626f78204944000000000000000000000000000000000000600082015250565b6000611355600e8361130e565b91506113608261131f565b602082019050919050565b6000602082019050818103600083015261138481611348565b9050919050565b7f496e76616c6964204e465420746f6b656e206164647265737300000000000000600082015250565b60006113c160198361130e565b91506113cc8261138b565b602082019050919050565b600060208201905081810360008301526113f0816113b4565b9050919050565b7f426f7820616c7265616479206f70656e65640000000000000000000000000000600082015250565b600061142d60128361130e565b9150611438826113f7565b602082019050919050565b6000602082019050818103600083015261145c81611420565b9050919050565b7f496e636f7272656374207061796d656e7420616d6f756e740000000000000000600082015250565b600061149960188361130e565b91506114a482611463565b602082019050919050565b600060208201905081810360008301526114c88161148c565b9050919050565b60006040820190506114e46000830185611065565b6114f16020830184611199565b9392505050565b7f426f78206e6f74206f70656e6564207965740000000000000000000000000000600082015250565b600061152e60128361130e565b9150611539826114f8565b602082019050919050565b6000602082019050818103600083015261155d81611521565b9050919050565b7f5072697a6520616c726561647920636c61696d65640000000000000000000000600082015250565b600061159a60158361130e565b91506115a582611564565b602082019050919050565b600060208201905081810360008301526115c98161158d565b9050919050565b7f4e465420746f6b656e20636f6e7472616374206e6f7420736574000000000000600082015250565b6000611606601a8361130e565b9150611611826115d0565b602082019050919050565b60006020820190508181036000830152611635816115f9565b9050919050565b611645816110ed565b811461165057600080fd5b50565b6000815190506116628161163c565b92915050565b60006020828403121561167e5761167d61108f565b5b600061168c84828501611653565b91505092915050565b7f436f6e7472616374206e6f7420617574686f72697a656420746f206d696e7400600082015250565b60006116cb601f8361130e565b91506116d682611695565b602082019050919050565b600060208201905081810360008301526116fa816116be565b9050919050565b60008151905061171081611094565b92915050565b60006020828403121561172c5761172b61108f565b5b600061173a84828501611701565b9150509291505056fea264697066735822122028a180e5fbb420a21b88370da0124052763c2f5af9286ed4bf3432158126871c64736f6c63430008140033",
      "r": "0x378f3a3e69f833da67798ed87d670b50b1978cd6f73e8921f48b4ad570627e5e",
      "s": "0x7587e2120e1140057caa5a0adae9a7b3ff9e563b70440702f4ff0cc5ff4533ce",
      "v": 0,
      "chainId": 11155111
    }
  }
}